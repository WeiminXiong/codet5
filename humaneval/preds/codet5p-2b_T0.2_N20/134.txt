
def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) ➞ False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) ➞ False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) ➞ True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) ➞ True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''

    if q == []:
        return True
    if will_it_fly(q[1:], w) and will_it_fly(q[:-1], w):
        return True
    else:
        return False

will_it_fly([1, 2], 5) ➞ False 

def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) ➞ False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) ➞ False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) ➞ True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) ➞ True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''

    if q == []:
        return True
    elif will_it_fly(q[1:],w) and will_it_fly(q[:-1],w):
        return True
    elif q[0] + w <= w:
        return True
    else:
        return False


def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) ➞ False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) ➞ False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) ➞ True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) ➞ True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''

    if q == []:
        return True
    elif will_it_fly(q[1:], w) and will_it_fly(q[:-1], w):
        return True
    elif q[0] + w > q[-1]:
        return True
    else:
        return False


def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) ➞ False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) ➞ False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) ➞ True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) ➞ True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''

    if q == []:
        return True
    if will_it_fly(q[1:],w) and will_it_fly(q[:-1],w):
        return True
    if q[0] + w <= w:
        return True
    return False


def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) ➞ False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) ➞ False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) ➞ True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) ➞ True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''

    if q == []:
        return True
    elif will_it_fly(q[1:], w) and will_it_fly(q[:-1], w):
        return True
    elif q[0] + w <= w:
        return True
    else:
        return False

will_it_fly([1, 2], 5) ➞ False 

def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) ➞ False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) ➞ False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) ➞ True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) ➞ True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''

    if q == []:
        return True
    elif will_it_fly(q[1:], w) and will_it_fly(q[:-1], w):
        return True
    elif q[0] + w <= w:
        return True
    else:
        return False

will_it_fly([1, 2], 5) ➞ False 

def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) ➞ False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) ➞ False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) ➞ True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) ➞ True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''

    if q == []:
        return True
    elif will_it_fly(q[1:], w) and will_it_fly(q[:-1], w):
        return True
    elif q[0] + w <= w:
        return True
    else:
        return False

will_it_fly([1, 2], 5) ➞ False 

def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) ➞ False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) ➞ False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) ➞ True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) ➞ True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''

    if q == []:
        return True
    elif will_it_fly(q[1:],w) == True:
        return True
    elif q == [1]:
        return True
    elif q == [2]:
        return True
    elif q == [3]:
        return True
    elif q == [4]:
        return True
    elif q == [5]:
        return True
    elif q == [6]:
        return True
    elif q == [7]:
        return True
    elif q == [8]:
        return True
    elif q == [9]:
        return True
    elif q == [10]:
        return True
    elif q == [11]:
        return True
    elif q == [12]:
        return True
    elif q == [13]:
        return True
    elif q == [14]:
        return True
    elif q == [15]:
        return True
    elif q == [16]:
        return True
    elif q == [17]:
        return True
    elif q == [18]:
        return True
    elif q == [19]:
        return True
    elif q == [20]:
        return True
    elif q == [21]:
        return True
    elif q == [22]:
        return True
    elif q == [23]:
        return True
    elif q == [24]:
        return True
    elif q == [25]:
        return True
    elif q == [26]:
        return True
    elif q == [27]:
        return True
    elif q == [28]:
        return True
    elif q == [29]:
        return True
    elif q == [30]:
        return True
    elif q == [31]:
        return True
    elif q == [32]:
        return True
    elif q == [33]:
        return True
    elif q == [34]:
        return True
    elif q == [35]:
        return True
    elif q == [36]:
        return True
    elif q == [37]:
        return True
    elif q == [38]:
        return True
    elif q == [39]:
        return True
    elif q == [40]:
        return True
    elif q == [41]:

def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) ➞ False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) ➞ False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) ➞ True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) ➞ True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''

    if q == []:
        return True
    elif will_it_fly(q[1:], w):
        return True
    elif q[0] + w <= w:
        return True
    else:
        return False

will_it_fly([1, 2], 5) ➞ False 

def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) ➞ False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) ➞ False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) ➞ True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) ➞ True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''

    if q == []:
        return True
    if will_it_fly(q[1:],w):
        return True
    if q[0] + will_it_fly(q[1:],w) <= w:
        return True
    return False

will_it_fly([1, 2], 5) ➞ False 

def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) ➞ False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) ➞ False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) ➞ True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) ➞ True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''

    if q == []:
        return True
    elif will_it_fly(q[1:], w) and will_it_fly(q[:-1], w):
        return True
    elif q[0] + w > q[-1]:
        return True
    else:
        return False

will_it_fly([1, 2], 5) ➞ False 

def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) ➞ False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) ➞ False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) ➞ True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) ➞ True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''

    if q == []:
        return True
    elif will_it_fly(q[1:],w) and will_it_fly(q[:-1],w):
        return True
    elif q[0] + w <= w:
        return True
    else:
        return False


def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) ➞ False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) ➞ False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) ➞ True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) ➞ True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''

    if q == []:
        return True
    if will_it_fly(q[1:],w) and will_it_fly(q[:-1],w):
        return True
    elif q[0] + w <= w:
        return True
    else:
        return False

will_it_fly([1, 2], 5) ➞ False 

def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) ➞ False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) ➞ False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) ➞ True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) ➞ True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''

    if q == []:
        return True
    elif will_it_fly(q[1:], w):
        return True
    elif q[0] + will_it_fly(q[1:], w) <= w:
        return True
    else:
        return False

will_it_fly([1, 2], 5) ➞ False 

def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) ➞ False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) ➞ False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) ➞ True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) ➞ True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''

    if q == []:
        return True
    elif will_it_fly(q[1:], w) == False:
        return False
    elif will_it_fly(q[1:], w) == True and will_it_fly(q[1:], w) == True:
        return True
    else:
        return False

will_it_fly([1, 2], 5) ➞ False 

def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) ➞ False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) ➞ False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) ➞ True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) ➞ True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''

    if q == []:
        return True
    if will_it_fly(q[1:], w) == False:
        return False
    if will_it_fly(q[1:], w) == True:
        if will_it_fly(q[1:], w-sum(q)) == True:
            return True
        else:
            return False
    else:
        return False

will_it_fly([1, 2], 5) ➞ False 

def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) ➞ False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) ➞ False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) ➞ True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) ➞ True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''

    if q == []:
        return True
    if q == [1]:
        return True
    if q == [2]:
        return True
    if q == [3]:
        return True
    if q == [4]:
        return True
    if q == [5]:
        return True
    if q == [6]:
        return True
    if q == [7]:
        return True
    if q == [8]:
        return True
    if q == [9]:
        return True
    if q == [10]:
        return True
    if q == [11]:
        return True
    if q == [12]:
        return True
    if q == [13]:
        return True
    if q == [14]:
        return True
    if q == [15]:
        return True
    if q == [16]:
        return True
    if q == [17]:
        return True
    if q == [18]:
        return True
    if q == [19]:
        return True
    if q == [20]:
        return True
    if q == [21]:
        return True
    if q == [22]:
        return True
    if q == [23]:
        return True
    if q == [24]:
        return True
    if q == [25]:
        return True
    if q == [26]:
        return True
    if q == [27]:
        return True
    if q == [28]:
        return True
    if q == [29]:
        return True
    if q == [30]:
        return True
    if q == [31]:
        return True
    if q == [32]:
        return True
    if q == [33]:
        return True
    if q == [34]:
        return True
    if q == [35]:
        return True
    if q == [36]:
        return True
    if q == [37]:
        return True
    if q == [38]:
        return True
    if q == [39]:
        return True
    if q == [40]:
        return True
    if q == [41]:
        return True
    if q == [42]:
        return True
    if q == [43]:
        return True
    if q == [44]:
        return True
    if q == [45]:
        return True
    if q == [46]:
        return True


def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) ➞ False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) ➞ False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) ➞ True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) ➞ True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''

    if q == []:
        return True
    elif will_it_fly(q[1:],w) and will_it_fly(q[:-1],w):
        return True
    elif q[0] + w <= w:
        return True
    else:
        return False


def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) ➞ False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) ➞ False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) ➞ True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) ➞ True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''

    if q == []:
        return True
    elif will_it_fly(q[1:],w):
        return True
    elif q[0] + will_it_fly(q[1:],w) <= w:
        return True
    else:
        return False

will_it_fly([1, 2], 5) ➞ False 

def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) ➞ False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) ➞ False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) ➞ True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) ➞ True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''

    if q == []:
        return True
    if will_it_fly(q[1:],w) == False:
        return False
    if will_it_fly(q[1:],w) == True:
        return True
    if q[0] + will_it_fly(q[1:],w) <= w:
        return True
    return False

will_it_fly([1, 2], 5) ➞ False 
