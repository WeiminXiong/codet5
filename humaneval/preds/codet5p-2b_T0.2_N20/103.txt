

def change_base(x: int, base: int):
    """Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """

    if base < 10:
        return change_base(x, 10)
    else:
        return change_base(x // base, base) + str(x % base)



def change_base(x: int, base: int):
    """Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """

    if base > 10:
        raise ValueError("base numbers are less than 10.")
    if x < 0:
        raise ValueError("input number x must be positive.")
    if base < 2:
        raise ValueError("base must be greater than 1.")
    if x == 0:
        return '0'
    digits = []
    while x > 0:
        digits.append(change_base(x % base, base))
        x //= base
    return ''.join(digits[::-1])



def change_base(x: int, base: int):
    """Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """

    if x < base:
        return change_base(x, base)
    else:
        return change_base(x // base, base) + str(x % base)



def change_base(x: int, base: int):
    """Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """

    if base < 10:
        return change_base(x, 10)
    if x < base:
        return change_base(x, base)
    return change_base(x // base, base) + str(x % base)



def change_base(x: int, base: int):
    """Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """

    if base < 10:
        raise ValueError("Base must be greater than 10.")
    if x < 0:
        raise ValueError("Input number must be greater than 0.")
    if x == 0:
        return "0"
    else:
        return change_base(x // base, base) + str(x % base)



def change_base(x: int, base: int):
    """Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """

    if x < base:
        return change_base(x * base, base)
    elif x == base:
        return str(x)
    else:
        return change_base(x // base, base) + str(x % base)



def change_base(x: int, base: int):
    """Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """

    return change_base(x, 10) if x < 10 else change_base(x // base, base) + str(x % base)



def change_base(x: int, base: int):
    """Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """

    if x < base:
        return change_base(x*base, base)
    else:
        return change_base(x//base, base) + str(x % base)



def change_base(x: int, base: int):
    """Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """

    if base > 10:
        raise ValueError("base must be less than 10")
    if x < 0:
        raise ValueError("x must be a positive number")
    if x == 0:
        return '0'
    result = ''
    while x > 0:
        result = str(x % base) + result
        x = x // base
    return result



def change_base(x: int, base: int):
    """Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """

    if x < base:
        return change_base(x * base, base)
    else:
        return change_base(x // base, base) + str(x % base)



def change_base(x: int, base: int):
    """Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """

    if x < base:
        return change_base(x * base, base)
    else:
        return change_base(x // base, base) + str(x % base)



def change_base(x: int, base: int):
    """Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """

    if base > 10:
        raise ValueError('base must be less than 10')
    if x < 0:
        raise ValueError('x must be positive')
    if base == 10:
        return str(x)
    else:
        return change_base(x // base, base) + str(x % base)



def change_base(x: int, base: int):
    """Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """

    if x < base:
        return change_base(x, base)
    else:
        return change_base(x // base, base) + str(x % base)



def change_base(x: int, base: int):
    """Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """

    if base < 10:
        raise ValueError("base numbers are less than 10.")
    if x < base:
        return change_base(x, base)
    else:
        return change_base(x // base, base) + str(x % base)



def change_base(x: int, base: int):
    """Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """

    if x < base:
        return change_base(x * base, base)
    else:
        return change_base(x // base, base) + str(x % base)



def change_base(x: int, base: int):
    """Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """

    if x < base:
        return change_base(x, base)
    else:
        return change_base(x // base, base) + str(x % base)



def change_base(x: int, base: int):
    """Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """

    if x < base:
        return change_base(x * base, base)
    else:
        return change_base(x // base, base) + str(x % base)



def change_base(x: int, base: int):
    """Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """

    if x < base:
        return change_base(x * base, base)
    else:
        return change_base(x // base, base) + str(x % base)



def change_base(x: int, base: int):
    """Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """

    if x < base:
        return change_base(x * base, base)
    else:
        return change_base(x // base, base) + str(x % base)




def change_base(x: int, base: int):
    """Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """

    if base > 10:
        raise ValueError("base must be less than 10")
    if x < 0:
        raise ValueError("x must be a positive number")
    if base == 10:
        return str(x)
    else:
        return change_base(x//base, base) + change_base(x%base, base)

