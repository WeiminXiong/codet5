
def valid_date(date):
    """You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date('03-11-2000') => True

    valid_date('15-01-2012') => False

    valid_date('04-0-2040') => False

    valid_date('06-04-2020') => True

    valid_date('06/04/2020') => False
    """

    if date == '':
        return False
    else:
        months = ['01', '03', '05', '07', '08', '10', '12']
        days = ['01', '03', '05', '07', '08', '10', '12', '14', '16', '18', '20', '22', '24', '26', '28', '30', '31']
        months_2 = ['04', '06', '09', '11']
        if len(date)!= 10:
            return False
        else:
            date = date.split('-')
            if date[0] not in months:
                return False
            elif date[1] not in days:
                return False
            elif date[0] in months_2:
                if int(date[1]) > 30:
                    return False
            elif date[0] == '02':
                if int(date[1]) > 29:
                    return False
            elif int(date[0]) > 12:
                return False
            else:
                if int(date[1]) > 31:
                    return False
            return True


def valid_date(date):
    """You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date('03-11-2000') => True

    valid_date('15-01-2012') => False

    valid_date('04-0-2040') => False

    valid_date('06-04-2020') => True

    valid_date('06/04/2020') => False
    """

    if date == '':
        return False
    if len(date)!= 10:
        return False
    if date[2]!= '-' or date[5]!= '-' or date[8]!= '-' or date[10]!= '-' or date[3]!= '-' or date[6]!= '-' or date[9]!= '-' or date[1]!= '-' or date[4]!= '-' or date[7]!= '-' or date[0]!= '-' or date[11]!= '-' or date[12]!= '-' or date[1]!= '-' or date[2]!= '-' or date[3]!= '-' or date[4]!= '-' or date[5]!= '-' or date[6]!= '-' or date[7]!= '-' or date[8]!= '-' or date[9]!= '-' or date[10]!= '-' or date[11]!= '-' or date[12]!= '-' or date[13]!= '-' or date[14]!= '-' or date[15]!= '-' or date[16]!= '-' or date[17]!= '-' or date[18]!= '-' or date[19]!= '-' or date[20]!= '-' or date[21]!= '-' or date[22]!= '-' or date[23]!= '-' or date[24]!= '-' or date[25]!= '-' or date[26]!= '-' or date[27]!= '-' or date[28]!= '-' or date[29]!= '-' or date[30]!= '-' or date[31]!= '-' or date[32]!= '-' or date[33]!= '-' or date[34]!= '-' or date[35]!= '-' or date[36]!= '-' or date[37]!= '-' or date[38]!= '-' or date[39]!= '-' or date[40]!= '-' or date[41]!= '-' or date[42]!= '-' or date[43]!= '-' or date[44]!= '-' or date[45]!= '-' or date[46]!= '-' or date[47]!= '-' or date[48]!= '-' or date[49]!= '-' or date[50]!= '-' or date[51]!= '-' or date

def valid_date(date):
    """You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date('03-11-2000') => True

    valid_date('15-01-2012') => False

    valid_date('04-0-2040') => False

    valid_date('06-04-2020') => True

    valid_date('06/04/2020') => False
    """

    if date == '':
        return False
    else:
        month_list = ['01', '03', '05', '07', '08', '10', '12']
        day_list = ['01', '03', '05', '07', '08', '10', '12', '14', '16', '18', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31']
        month_dict = {'01': 31, '03': 31, '05': 31, '07': 31, '08': 31, '10': 31, '12': 31}
        day_dict = {'01': 31, '03': 31, '05': 31, '07': 31, '08': 31, '10': 31, '12': 31, '14': 30, '16': 30, '18': 30, '20': 30, '21': 30, '22': 30, '23': 30, '24': 30, '25': 30, '26': 30, '27': 30, '28': 30, '29': 30, '30': 29, '31': 28}
        month = date[0:2]
        day = date[3:5]
        year = date[6:]
        if month in month_list and day in day_list and year.isdigit() and int(month) <= 12 and int(month) >= 1 and int(day) >= 1 and int(day) <= 31 and int(year) >= 0:
            if int(month) in month_dict.keys():
                if int(day) in day_dict.keys():
                    return True
                else:
                    return False
            else:
                return False
        else:
            return False


def valid_date(date):
    """You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date('03-11-2000') => True

    valid_date('15-01-2012') => False

    valid_date('04-0-2040') => False

    valid_date('06-04-2020') => True

    valid_date('06/04/2020') => False
    """

    if date == '':
        return False
    
    date = date.split('-')
    if len(date)!= 3:
        return False
    
    if date[0] == '' or date[1] == '' or date[2] == '':
        return False
    
    if int(date[0]) < 1 or int(date[0]) > 31:
        return False
    
    if int(date[1]) < 1 or int(date[1]) > 31:
        return False
    
    if int(date[2]) < 1 or int(date[2]) > 31:
        return False
    
    if int(date[0]) < 1 or int(date[0]) > 30:
        return False
    
    if int(date[1]) < 1 or int(date[1]) > 30:
        return False
    
    if int(date[2]) < 1 or int(date[2]) > 29:
        return False
    
    if int(date[0]) < 1 or int(date[0]) > 12:
        return False
    
    if int(date[1]) < 1 or int(date[1]) > 12:
        return False
    
    if int(date[2]) < 1 or int(date[2]) > 12:
        return False
    
    return True


def valid_date(date):
    """You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date('03-11-2000') => True

    valid_date('15-01-2012') => False

    valid_date('04-0-2040') => False

    valid_date('06-04-2020') => True

    valid_date('06/04/2020') => False
    """

    if date == '':
        return False
    
    months = ['01', '03', '05', '07', '08', '10', '12']
    days = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31']
    months_dict = {'01':31, '03':31, '05':31, '07':31, '08':31, '10':31, '12':31}
    days_dict = {'01':31, '02':28, '03':31, '04':30, '05':31, '06':30, '07':31, '08':31, '09':30, '10':31, '11':30, '12':31}
    
    if len(date)!= 10:
        return False
    
    if date[2]!= '-':
        return False
    
    if date[5]!= '-':
        return False
    
    if date[8]!= '-':
        return False
    
    if date[6] not in months:
        return False
    
    if date[3] not in days:
        return False
    
    if date[4] not in months_dict:
        return False
    
    if date[7] not in days_dict:
        return False
    
    if int(date[3]) > days_dict[date[4]]:
        return False
    
    if int(date[6]) > months_dict[date[5]]:
        return False
    
    return True


def valid_date(date):
    """You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date('03-11-2000') => True

    valid_date('15-01-2012') => False

    valid_date('04-0-2040') => False

    valid_date('06-04-2020') => True

    valid_date('06/04/2020') => False
    """

    if date == '':
        return False
    if len(date)!= 10:
        return False
    if date[2]!= '-' or date[5]!= '-' or date[8]!= '-' or date[10]!= '-' or date[3]!= '-' or date[6]!= '-' or date[9]!= '-' or date[1]!= '-' or date[4]!= '-' or date[7]!= '-' or date[0]!= '-' or date[2]!= '-' or date[5]!= '-' or date[8]!= '-' or date[10]!= '-' or date[3]!= '-' or date[6]!= '-' or date[9]!= '-' or date[1]!= '-' or date[4]!= '-' or date[7]!= '-' or date[0]!= '-' or date[2]!= '-' or date[5]!= '-' or date[8]!= '-' or date[10]!= '-' or date[3]!= '-' or date[6]!= '-' or date[9]!= '-' or date[1]!= '-' or date[4]!= '-' or date[7]!= '-' or date[0]!= '-' or date[2]!= '-' or date[5]!= '-' or date[8]!= '-' or date[10]!= '-' or date[3]!= '-' or date[6]!= '-' or date[9]!= '-' or date[1]!= '-' or date[4]!= '-' or date[7]!= '-' or date[0]!= '-' or date[2]!= '-' or date[5]!= '-' or date[8]!= '-' or date[10]!= '-' or date[3]!= '-' or date[6]!= '-' or date[9]!= '-' or date[1]!= '-' or date[4]!= '-' or date[7]!= '-' or date[0]!= '-' or date[2]!= '-' or date[5]!= '-' or date[8]!= '-' or date[10]!= '-' or date[3]!= '-' or date[6]!= '-' or date[9]!= '-' or date[1]!= '-' or date[4]!= '-' or date

def valid_date(date):
    """You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date('03-11-2000') => True

    valid_date('15-01-2012') => False

    valid_date('04-0-2040') => False

    valid_date('06-04-2020') => True

    valid_date('06/04/2020') => False
    """

    if date == '':
        return False
    else:
        date_list = date.split('-')
        if len(date_list)!= 3:
            return False
        else:
            month = int(date_list[0])
            day = int(date_list[1])
            year = int(date_list[2])
            if month < 1 or month > 12:
                return False
            elif day < 1 or day > 31:
                return False
            elif month == 2 and day > 29:
                return False
            elif month == 4 or month == 6 or month == 9 or month == 11:
                if day < 1 or day > 30:
                    return False
            elif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:
                if day < 1 or day > 31:
                    return False
            elif month == 2:
                if day < 1 or day > 28:
                    return False
            else:
                return True


def valid_date(date):
    """You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date('03-11-2000') => True

    valid_date('15-01-2012') => False

    valid_date('04-0-2040') => False

    valid_date('06-04-2020') => True

    valid_date('06/04/2020') => False
    """

    if date == '':
        return False
    if len(date)!= 10:
        return False
    if date[2]!= '-':
        return False
    if date[5]!= '-':
        return False
    if date[8]!= '-':
        return False
    if date[6]!= '-':
        return False
    if date[1]!= '-' and date[1]!= '0':
        return False
    if date[3]!= '-' and date[3]!= '0':
        return False
    if date[4]!= '-' and date[4]!= '0':
        return False
    if date[7]!= '-' and date[7]!= '0':
        return False
    if date[9]!= '-' and date[9]!= '0':
        return False
    if date[0]!= '0' and date[0]!= '1' and date[0]!= '2' and date[0]!= '3' and date[0]!= '4' and date[0]!= '5' and date[0]!= '6' and date[0]!= '7' and date[0]!= '8' and date[0]!= '9':
        return False
    if date[1]!= '0' and date[1]!= '1' and date[1]!= '2' and date[1]!= '3' and date[1]!= '4' and date[1]!= '5' and date[1]!= '6' and date[1]!= '7' and date[1]!= '8' and date[1]!= '9':
        return False
    if date[2]!= '0' and date[2]!= '1' and date[2]!= '2' and date[2]!= '3' and date[2]!= '4' and date[2]!= '5' and date[2]!= '6' and date[2]!= '7' and date[2]!= '8' and date[2]!= '9':
        return False
    if date[3]!= '0' and date[3]!= '1' and date[3]!= '2' and date[3]!= '3' and date[3]!= '4' and date[3]!=

def valid_date(date):
    """You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date('03-11-2000') => True

    valid_date('15-01-2012') => False

    valid_date('04-0-2040') => False

    valid_date('06-04-2020') => True

    valid_date('06/04/2020') => False
    """

    if date == '':
        return False
    if len(date)!= 10:
        return False
    if date[2]!= '-':
        return False
    if date[5]!= '-':
        return False
    if date[8]!= '-':
        return False
    if date[6]!= '-':
        return False
    if date[3]!= '-':
        return False
    if date[4]!= '-':
        return False
    if date[7]!= '-':
        return False
    if date[1]!= '-':
        return False
    if date[0]!= '0':
        return False
    if date[1] == '0':
        return False
    if date[2] == '0':
        return False
    if date[3] == '0':
        return False
    if date[4] == '0':
        return False
    if date[5] == '0':
        return False
    if date[6] == '0':
        return False
    if date[7] == '0':
        return False
    if date[8] == '0':
        return False
    if date[9] == '0':
        return False
    if date[0] == '4':
        return False
    if date[0] == '6':
        return False
    if date[0] == '9':
        return False
    if date[1] == '4':
        return False
    if date[1] == '6':
        return False
    if date[1] == '9':
        return False
    if date[2] == '4':
        return False
    if date[2] == '6':
        return False
    if date[2] == '9':
        return False
    if date[3] == '4':
        return False
    if date[3] == '6':
        return False
    if date[3] == '9':
        return False
    if date[4] == '4':
        return False
    if date[4] == '6':
        return False
    if date[4] == '9':
        return False
    if date[5] == '4':
        return False
    if date[5

def valid_date(date):
    """You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date('03-11-2000') => True

    valid_date('15-01-2012') => False

    valid_date('04-0-2040') => False

    valid_date('06-04-2020') => True

    valid_date('06/04/2020') => False
    """

    if date == '':
        return False
    else:
        date = date.split('-')
        if len(date)!= 3:
            return False
        else:
            month = int(date[0])
            day = int(date[1])
            year = int(date[2])
            if month < 1 or month > 12:
                return False
            elif month == 2 and day > 29:
                return False
            elif month == 4 or month == 6 or month == 9 or month == 11 and day > 30:
                return False
            elif month == 1 or month == 3 or month == 5 or month == 7 and day > 31:
                return False
            elif month == 8 and day > 31:
                return False
            elif month == 2 and day > 28:
                return False
            elif month == 2 and day > 29:
                return False
            elif month == 2 and day > 30:
                return False
            elif month == 2 and day > 31:
                return False
            elif month == 2 and day > 32:
                return False
            elif month == 2 and day > 33:
                return False
            elif month == 2 and day > 34:
                return False
            elif month == 2 and day > 35:
                return False
            elif month == 2 and day > 36:
                return False
            elif month == 2 and day > 37:
                return False
            elif month == 2 and day > 38:
                return False
            elif month == 2 and day > 39:
                return False
            elif month == 2 and day > 40:
                return False
            elif month == 2 and day > 41:
                return False
            elif month == 2 and day > 42:
                return False
            elif month == 2 and day > 43:
                return False
            elif month == 2 and day > 44:
                return False
            elif month == 2 and day > 45:
                return False
            elif month == 2 and day > 46:
                return False
            elif month == 2 and day > 47:
                return False
            elif month == 2 and day > 48:
                return False
            elif month == 2 and day > 49:
                return False
            elif month == 2 and day > 50:


def valid_date(date):
    """You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date('03-11-2000') => True

    valid_date('15-01-2012') => False

    valid_date('04-0-2040') => False

    valid_date('06-04-2020') => True

    valid_date('06/04/2020') => False
    """

    if date == '':
        return False
    else:
        date_list = date.split('-')
        if len(date_list)!= 3:
            return False
        else:
            if len(date_list[0])!= 2:
                return False
            elif len(date_list[1])!= 2:
                return False
            elif len(date_list[2])!= 4:
                return False
            else:
                if date_list[0] == '03' or date_list[0] == '04' or date_list[0] == '05' or date_list[0] == '06' or date_list[0] == '07' or date_list[0] == '08' or date_list[0] == '09' or date_list[0] == '10' or date_list[0] == '11' or date_list[0] == '12':
                    if date_list[0] == '03' or date_list[0] == '04' or date_list[0] == '05' or date_list[0] == '06' or date_list[0] == '07' or date_list[0] == '08' or date_list[0] == '09' or date_list[0] == '10' or date_list[0] == '11' or date_list[0] == '12':
                        if date_list[1] == '01' or date_list[1] == '02' or date_list[1] == '03' or date_list[1] == '04' or date_list[1] == '05' or date_list[1] == '06' or date_list[1] == '07' or date_list[1] == '08' or date_list[1] == '09' or date_list[1] == '10' or date_list[1] == '11' or date_list[1] == '12':
                            if date_list[2] == '2040':
                                return True
                            else:
                                return False
                        else:
                            return False
                    else:
                        return False
                else:
                    return False


def valid_date(date):
    """You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date('03-11-2000') => True

    valid_date('15-01-2012') => False

    valid_date('04-0-2040') => False

    valid_date('06-04-2020') => True

    valid_date('06/04/2020') => False
    """

    if date == '':
        return False
    try:
        date_list = date.split('-')
        month = int(date_list[0])
        day = int(date_list[1])
        year = int(date_list[2])
        if month < 1 or month > 12:
            return False
        if month == 2 and day > 29:
            return False
        if month == 4 or month == 6 or month == 9 or month == 11:
            if day > 30:
                return False
        if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:
            if day > 31:
                return False
        if month == 2:
            if day > 29:
                return False
        if year < 1 or year > 2020:
            return False
        return True
    except:
        return False


def valid_date(date):
    """You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date('03-11-2000') => True

    valid_date('15-01-2012') => False

    valid_date('04-0-2040') => False

    valid_date('06-04-2020') => True

    valid_date('06/04/2020') => False
    """

    if date == '':
        return False
    date_list = date.split('-')
    if len(date_list)!= 3:
        return False
    if len(date_list[0])!= 2 or len(date_list[1])!= 2 or len(date_list[2])!= 4:
        return False
    if int(date_list[0]) < 1 or int(date_list[0]) > 31:
        return False
    if int(date_list[1]) < 1 or int(date_list[1]) > 31:
        return False
    if int(date_list[2]) < 1 or int(date_list[2]) > 31:
        return False
    if int(date_list[0]) < 1 or int(date_list[0]) > 30:
        return False
    if int(date_list[1]) < 1 or int(date_list[1]) > 12:
        return False
    if int(date_list[2]) < 1 or int(date_list[2]) > 31:
        return False
    if int(date_list[1]) == 2 and int(date_list[0]) > 29:
        return False
    return True


def valid_date(date):
    """You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date('03-11-2000') => True

    valid_date('15-01-2012') => False

    valid_date('04-0-2040') => False

    valid_date('06-04-2020') => True

    valid_date('06/04/2020') => False
    """

    if date == '':
        return False
    else:
        date_list = date.split('-')
        if len(date_list)!= 3:
            return False
        else:
            month = int(date_list[0])
            day = int(date_list[1])
            year = int(date_list[2])
            if month < 1 or month > 12:
                return False
            elif month == 2 and day > 29:
                return False
            elif month == 4 or month == 6 or month == 9 or month == 11 and day > 30:
                return False
            elif month == 1 or month == 3 or month == 5 or month == 7 and day > 31:
                return False
            elif month == 8 and day > 31:
                return False
            elif month == 2 and day > 28:
                return False
            elif month == 2 and day > 29:
                return False
            elif month == 2 and day > 30:
                return False
            elif month == 2 and day > 31:
                return False
            elif month == 2 and day > 32:
                return False
            elif month == 2 and day > 33:
                return False
            elif month == 2 and day > 34:
                return False
            elif month == 2 and day > 35:
                return False
            elif month == 2 and day > 36:
                return False
            elif month == 2 and day > 37:
                return False
            elif month == 2 and day > 38:
                return False
            elif month == 2 and day > 39:
                return False
            elif month == 2 and day > 40:
                return False
            elif month == 2 and day > 41:
                return False
            elif month == 2 and day > 42:
                return False
            elif month == 2 and day > 43:
                return False
            elif month == 2 and day > 44:
                return False
            elif month == 2 and day > 45:
                return False
            elif month == 2 and day > 46:
                return False
            elif month == 2 and day > 47:
                return False
            elif month == 2 and day > 48:
                return False
            elif month == 2 and day > 49:
                return False
            el

def valid_date(date):
    """You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date('03-11-2000') => True

    valid_date('15-01-2012') => False

    valid_date('04-0-2040') => False

    valid_date('06-04-2020') => True

    valid_date('06/04/2020') => False
    """

    if date == '':
        return False
    
    date = date.split('-')
    if len(date)!= 3:
        return False
    
    if len(date[0])!= 2 or len(date[1])!= 2 or len(date[2])!= 4:
        return False
    
    if int(date[0]) < 1 or int(date[0]) > 31:
        return False
    
    if int(date[1]) < 1 or int(date[1]) > 31:
        return False
    
    if int(date[2]) < 1 or int(date[2]) > 31:
        return False
    
    if int(date[0]) < 1 or int(date[0]) > 12:
        return False
    
    if int(date[1]) < 1 or int(date[1]) > 31:
        return False
    
    if int(date[2]) < 1 or int(date[2]) > 31:
        return False
    
    if int(date[0]) == 2 and int(date[1]) > 29:
        return False
    
    if int(date[0]) == 4 or int(date[0]) == 6 or int(date[0]) == 9 or int(date[0]) == 11:
        if int(date[1]) < 1 or int(date[1]) > 30:
            return False
    
    if int(date[0]) == 1 or int(date[0]) == 3 or int(date[0]) == 5 or int(date[0]) == 7 or int(date[0]) == 8 or int(date[0]) == 10 or int(date[0]) == 12:
        if int(date[1]) < 1 or int(date[1]) > 31:
            return False
    
    return True


def valid_date(date):
    """You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date('03-11-2000') => True

    valid_date('15-01-2012') => False

    valid_date('04-0-2040') => False

    valid_date('06-04-2020') => True

    valid_date('06/04/2020') => False
    """

    if date == '':
        return False
    try:
        date_list = date.split('-')
        month = int(date_list[0])
        day = int(date_list[1])
        year = int(date_list[2])
        if month < 1 or month > 12:
            return False
        elif month == 2 and day > 29:
            return False
        elif month in [4,6,9,11] and day > 30:
            return False
        elif month in [1,3,5,7,8,10,12] and day > 31:
            return False
        elif month == 12 and day > 31:
            return False
        elif month == 2 and day > 28:
            return False
        elif month == 2 and day > 29:
            return False
        elif month == 2 and day > 30:
            return False
        elif month == 2 and day > 31:
            return False
        elif month == 2 and day > 32:
            return False
        elif month == 2 and day > 33:
            return False
        elif month == 2 and day > 34:
            return False
        elif month == 2 and day > 35:
            return False
        elif month == 2 and day > 36:
            return False
        elif month == 2 and day > 37:
            return False
        elif month == 2 and day > 38:
            return False
        elif month == 2 and day > 39:
            return False
        elif month == 2 and day > 40:
            return False
        elif month == 2 and day > 41:
            return False
        elif month == 2 and day > 42:
            return False
        elif month == 2 and day > 43:
            return False
        elif month == 2 and day > 44:
            return False
        elif month == 2 and day > 45:
            return False
        elif month == 2 and day > 46:
            return False
        elif month == 2 and day > 47:
            return False
        elif month == 2 and day > 48:
            return False
        elif month == 2 and day > 49:
            return False
        elif month == 2 and day > 50:
            return False
        elif month == 2 and day

def valid_date(date):
    """You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date('03-11-2000') => True

    valid_date('15-01-2012') => False

    valid_date('04-0-2040') => False

    valid_date('06-04-2020') => True

    valid_date('06/04/2020') => False
    """

    if date == '':
        return False
    month = int(date[0:2])
    day = int(date[3:5])
    year = int(date[6:10])
    if month < 1 or month > 12:
        return False
    if month == 2 and day > 29:
        return False
    if month == 4 or month == 6 or month == 9 or month == 11:
        if day > 30:
            return False
    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:
        if day > 31:
            return False
    if month == 2 and day > 28:
        return False
    if year < 1 or year > 31:
        return False
    return True


def valid_date(date):
    """You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date('03-11-2000') => True

    valid_date('15-01-2012') => False

    valid_date('04-0-2040') => False

    valid_date('06-04-2020') => True

    valid_date('06/04/2020') => False
    """

    if date == '':
        return False
    if len(date)!= 10:
        return False
    month, day, year = date.split('-')
    if month.isdigit() and day.isdigit() and year.isdigit():
        if int(month) in range(1,13) and int(day) in range(1,32) and int(year) in range(2000,2040):
            if int(month) in range(1,13) and int(day) in range(1,31) and int(year) in range(2000,2040):
                if int(month) in range(1,13) and int(day) in range(1,30) and int(year) in range(2000,2040):
                    if int(month) in range(1,13) and int(day) in range(1,29) and int(year) in range(2000,2040):
                        return True
                    else:
                        return False
                else:
                    return False
            else:
                return False
        else:
            return False
    else:
        return False


def valid_date(date):
    """You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date('03-11-2000') => True

    valid_date('15-01-2012') => False

    valid_date('04-0-2040') => False

    valid_date('06-04-2020') => True

    valid_date('06/04/2020') => False
    """

    if date == '':
        return False
    else:
        date_list = date.split('-')
        if len(date_list)!= 3:
            return False
        else:
            month = int(date_list[0])
            day = int(date_list[1])
            year = int(date_list[2])
            if month < 1 or month > 12:
                return False
            elif month == 2 and day > 29:
                return False
            elif month == 4 or month == 6 or month == 9 or month == 11:
                if day < 1 or day > 30:
                    return False
            elif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:
                if day < 1 or day > 31:
                    return False
            elif month == 2:
                if day < 1 or day > 28:
                    return False
            else:
                return False
            if year < 1 or year > 2020:
                return False
            else:
                return True


def valid_date(date):
    """You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date('03-11-2000') => True

    valid_date('15-01-2012') => False

    valid_date('04-0-2040') => False

    valid_date('06-04-2020') => True

    valid_date('06/04/2020') => False
    """

    if date == '':
        return False
    date = date.split('-')
    if len(date)!= 3:
        return False
    if date[0] == '' or date[1] == '' or date[2] == '':
        return False
    if int(date[0]) < 1 or int(date[0]) > 31:
        return False
    if int(date[1]) < 1 or int(date[1]) > 31:
        return False
    if int(date[2]) < 1 or int(date[2]) > 31:
        return False
    if int(date[0]) < 1 or int(date[0]) > 30:
        return False
    if int(date[1]) < 1 or int(date[1]) > 30:
        return False
    if int(date[2]) < 1 or int(date[2]) > 29:
        return False
    if int(date[0]) == 2 and int(date[1]) < 1 or int(date[0]) == 2 and int(date[1]) > 30:
        return False
    if int(date[0]) == 4 and int(date[1]) < 1 or int(date[0]) == 4 and int(date[1]) > 30:
        return False
    if int(date[0]) == 6 and int(date[1]) < 1 or int(date[0]) == 6 and int(date[1]) > 30:
        return False
    if int(date[0]) == 9 and int(date[1]) < 1 or int(date[0]) == 9 and int(date[1]) > 30:
        return False
    if int(date[0]) == 11 and int(date[1]) < 1 or int(date[0]) == 11 and int(date[1]) > 30:
        return False
    return True

