
def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') ➞ True
    is_nested('[]]]]]]][[[[[]') ➞ False
    is_nested('[][]') ➞ False
    is_nested('[]') ➞ False
    is_nested('[[][]]') ➞ True
    is_nested('[[]][[') ➞ True
    '''

    if len(string) < 3:
        return False
    if string[0] == '[' and string[-1] == ']':
        return True
    if string[0] == '[' and string[-1] == '[':
        return is_nested(string[1:-1])
    if string[0] == ']' and string[-1] == '[':
        return is_nested(string[1:-1])
    if string[0] == ']' and string[-1] == ']':
        return is_nested(string[1:-1])
    return False


def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') ➞ True
    is_nested('[]]]]]]][[[[[]') ➞ False
    is_nested('[][]') ➞ False
    is_nested('[]') ➞ False
    is_nested('[[][]]') ➞ True
    is_nested('[[]][[') ➞ True
    '''

    if len(string) < 3:
        return False
    if string[0] == '[' and string[-1] == ']':
        return True
    if string[0] == '[' and string[-1] == '[':
        return is_nested(string[1:-1])
    if string[0] == ']' and string[-1] == '[':
        return is_nested(string[1:-1])
    if string[0] == ']' and string[-1] == ']':
        return is_nested(string[1:-1])
    return False


def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') ➞ True
    is_nested('[]]]]]]][[[[[]') ➞ False
    is_nested('[][]') ➞ False
    is_nested('[]') ➞ False
    is_nested('[[][]]') ➞ True
    is_nested('[[]][[') ➞ True
    '''

    return True if string.count('[') == string.count(']') and string.count('[') == string.count(']') else False


def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') ➞ True
    is_nested('[]]]]]]][[[[[]') ➞ False
    is_nested('[][]') ➞ False
    is_nested('[]') ➞ False
    is_nested('[[][]]') ➞ True
    is_nested('[[]][[') ➞ True
    '''

    if len(string) == 0:
        return False
    if string[0] == ']':
        return False
    if string[0] == '[':
        return is_nested(string[1:])
    if string[0] == ']':
        return is_nested(string[1:])
    if string[0] == ']':
        return is_nested(string[1:])
    if string[0] == '[':
        return is_nested(string[1:])
    return True


def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') ➞ True
    is_nested('[]]]]]]][[[[[]') ➞ False
    is_nested('[][]') ➞ False
    is_nested('[]') ➞ False
    is_nested('[[][]]') ➞ True
    is_nested('[[]][[') ➞ True
    '''

    if string == '':
        return False
    if string[0] == ']':
        return False
    if string[0] == '[':
        return is_nested(string[1:])
    if string[0] == ']':
        return is_nested(string[1:])
    if string[0] == '[':
        return is_nested(string[1:])
    if string[0] == ']':
        return is_nested(string[1:])
    if string[0] == '[':
        return is_nested(string[1:])
    if string[0] == ']':
        return is_nested(string[1:])
    if string[0] == '[':
        return is_nested(string[1:])
    if string[0] == ']':
        return is_nested(string[1:])
    if string[0] == '[':
        return is_nested(string[1:])
    if string[0] == ']':
        return is_nested(string[1:])
    if string[0] == '[':
        return is_nested(string[1:])
    if string[0] == ']':
        return is_nested(string[1:])
    if string[0] == '[':
        return is_nested(string[1:])
    if string[0] == ']':
        return is_nested(string[1:])
    if string[0] == '[':
        return is_nested(string[1:])
    if string[0] == ']':
        return is_nested(string[1:])
    if string[0] == '[':
        return is_nested(string[1:])
    if string[0] == ']':
        return is_nested(string[1:])
    if string[0] == '[':
        return is_nested(string[1:])
    if string[0] == ']':
        return is_nested(string[1:])
    if string[0] == '[':
        return is_nested(string[1:])
    if string[0] == ']':
        return is_nested(string[1:])
    if string[0] == '[':
        return is_nested(string[1:])
    if string[0] == ']':
        return is_nested(string[1:])
    if string[0] == '[':
        return is_nested(string[1:])
    if string[0] == ']':
        return is_nested(string[1:])


def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') ➞ True
    is_nested('[]]]]]]][[[[[]') ➞ False
    is_nested('[][]') ➞ False
    is_nested('[]') ➞ False
    is_nested('[[][]]') ➞ True
    is_nested('[[]][[') ➞ True
    '''

    if len(string) < 3:
        return False
    if string[0] == '[' and string[-1] == ']':
        return True
    if string[0] == '[' and string[-1] == '[':
        return is_nested(string[1:-1])
    if string[0] == ']' and string[-1] == '[':
        return is_nested(string[1:-1])
    if string[0] == ']' and string[-1] == ']':
        return is_nested(string[1:-1])
    return False


def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') ➞ True
    is_nested('[]]]]]]][[[[[]') ➞ False
    is_nested('[][]') ➞ False
    is_nested('[]') ➞ False
    is_nested('[[][]]') ➞ True
    is_nested('[[]][[') ➞ True
    '''

    if string == '':
        return False
    if string[0] == '[' and string[-1] == ']':
        return True
    if string[0] == '[' and string[-1] == '[':
        return is_nested(string[1:-1])
    if string[0] == ']' and string[-1] == '[':
        return is_nested(string[1:-1])
    if string[0] == ']' and string[-1] == ']':
        return is_nested(string[1:-1])
    return False


def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') ➞ True
    is_nested('[]]]]]]][[[[[]') ➞ False
    is_nested('[][]') ➞ False
    is_nested('[]') ➞ False
    is_nested('[[][]]') ➞ True
    is_nested('[[]][[') ➞ True
    '''

    if len(string) < 3:
        return False
    if string[0] == '[' and string[-1] == ']':
        return True
    if string[0] == '[' and string[-1] == '[':
        return is_nested(string[1:-1])
    if string[0] == ']' and string[-1] == '[':
        return is_nested(string[1:-1])
    if string[0] == ']' and string[-1] == ']':
        return is_nested(string[1:-1])
    return False


def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') ➞ True
    is_nested('[]]]]]]][[[[[]') ➞ False
    is_nested('[][]') ➞ False
    is_nested('[]') ➞ False
    is_nested('[[][]]') ➞ True
    is_nested('[[]][[') ➞ True
    '''

    if len(string) == 0:
        return False
    if string[0] == ']':
        return False
    if string[0] == '[':
        return is_nested(string[1:])
    if string[0] == ']':
        return is_nested(string[1:])
    if string[0] == '[':
        return is_nested(string[1:])
    if string[0] == ']':
        return is_nested(string[1:])
    return True


def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') ➞ True
    is_nested('[]]]]]]][[[[[]') ➞ False
    is_nested('[][]') ➞ False
    is_nested('[]') ➞ False
    is_nested('[[][]]') ➞ True
    is_nested('[[]][[') ➞ True
    '''

    if len(string) == 0:
        return False
    if string[0] == ']':
        return False
    if string[0] == '[':
        return is_nested(string[1:])
    return is_nested(string[1:]) and is_nested(string[1:])


def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') ➞ True
    is_nested('[]]]]]]][[[[[]') ➞ False
    is_nested('[][]') ➞ False
    is_nested('[]') ➞ False
    is_nested('[[][]]') ➞ True
    is_nested('[[]][[') ➞ True
    '''

    if len(string) == 0:
        return False
    if string[0] == ']':
        return False
    if string[0] == '[':
        return is_nested(string[1:])
    if string[0] == ']':
        return is_nested(string[1:])
    return True


def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') ➞ True
    is_nested('[]]]]]]][[[[[]') ➞ False
    is_nested('[][]') ➞ False
    is_nested('[]') ➞ False
    is_nested('[[][]]') ➞ True
    is_nested('[[]][[') ➞ True
    '''

    if string == '':
        return False
    if string[0] == '[' and string[-1] == ']':
        return True
    if string[0] == '[' and string[-1] == '[':
        return is_nested(string[1:-1])
    if string[0] == ']' and string[-1] == '[':
        return is_nested(string[1:-1])
    if string[0] == ']' and string[-1] == ']':
        return is_nested(string[1:-1])
    return False


def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') ➞ True
    is_nested('[]]]]]]][[[[[]') ➞ False
    is_nested('[][]') ➞ False
    is_nested('[]') ➞ False
    is_nested('[[][]]') ➞ True
    is_nested('[[]][[') ➞ True
    '''

    if len(string) < 3:
        return False
    if string[0] == '[' and string[-1] == ']':
        return True
    if string[0] == '[' and string[-1] == '[':
        return is_nested(string[1:-1])
    if string[0] == ']' and string[-1] == '[':
        return is_nested(string[1:-1])
    if string[0] == ']' and string[-1] == ']':
        return is_nested(string[1:-1])
    return False


def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') ➞ True
    is_nested('[]]]]]]][[[[[]') ➞ False
    is_nested('[][]') ➞ False
    is_nested('[]') ➞ False
    is_nested('[[][]]') ➞ True
    is_nested('[[]][[') ➞ True
    '''

    if string.count('[')!= string.count(']'):
        return False
    
    if string.count('[') == 0:
        return False
    
    if string.count('[') == 1:
        return True
    
    if string.count('[') == 2:
        return is_nested(string[1:-1])
    
    if string.count('[') > 2:
        return is_nested(string[1:-1]) or is_nested(string[2:-2])
    
    return False


def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') ➞ True
    is_nested('[]]]]]]][[[[[]') ➞ False
    is_nested('[][]') ➞ False
    is_nested('[]') ➞ False
    is_nested('[[][]]') ➞ True
    is_nested('[[]][[') ➞ True
    '''

    if len(string) < 3:
        return False
    if string[0]!= '[':
        return False
    if string[-1]!= ']':
        return False
    for i in range(1, len(string) - 1):
        if string[i] == '[':
            if string[i + 1] == ']':
                return True
            else:
                return False
        if string[i] == ']':
            if string[i - 1] == '[':
                return True
            else:
                return False
    return False


def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') ➞ True
    is_nested('[]]]]]]][[[[[]') ➞ False
    is_nested('[][]') ➞ False
    is_nested('[]') ➞ False
    is_nested('[[][]]') ➞ True
    is_nested('[[]][[') ➞ True
    '''

    if len(string) < 3:
        return False
    if string[0]!= '[':
        return False
    if string[-1]!= ']':
        return False
    for i in range(1, len(string)-1):
        if string[i] == ']':
            return False
        if string[i] == '[':
            if string[i+1] == ']':
                return False
            if string[i+1] == '[':
                return False
            if string[i+1] == ']':
                return False
    return True


def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') ➞ True
    is_nested('[]]]]]]][[[[[]') ➞ False
    is_nested('[][]') ➞ False
    is_nested('[]') ➞ False
    is_nested('[[][]]') ➞ True
    is_nested('[[]][[') ➞ True
    '''

    return True if string.count('[') == string.count(']') and string.count('[') == string.count(']') else False


def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') ➞ True
    is_nested('[]]]]]]][[[[[]') ➞ False
    is_nested('[][]') ➞ False
    is_nested('[]') ➞ False
    is_nested('[[][]]') ➞ True
    is_nested('[[]][[') ➞ True
    '''

    return True if string.count('[') == string.count(']') and string.count('[') == string.count(']') else False


def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') ➞ True
    is_nested('[]]]]]]][[[[[]') ➞ False
    is_nested('[][]') ➞ False
    is_nested('[]') ➞ False
    is_nested('[[][]]') ➞ True
    is_nested('[[]][[') ➞ True
    '''

    return True if string.count('[') == string.count(']') and string.count('[') == string.count(']') else False


def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') ➞ True
    is_nested('[]]]]]]][[[[[]') ➞ False
    is_nested('[][]') ➞ False
    is_nested('[]') ➞ False
    is_nested('[[][]]') ➞ True
    is_nested('[[]][[') ➞ True
    '''

    if string == '':
        return False
    if string[0] == '[' and string[-1] == ']':
        return True
    if string[0] == '[' and string[-1] == '[':
        return is_nested(string[1:-1])
    if string[0] == ']' and string[-1] == '[':
        return is_nested(string[1:-1])
    if string[0] == ']' and string[-1] == ']':
        return is_nested(string[1:-1])
    return False

