
def rounded_avg(n, m):
    """You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m). 
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return -1.
    Example:
    rounded_avg(1, 5) => "0b11"
    rounded_avg(7, 5) => -1
    rounded_avg(10, 20) => "0b1111"
    rounded_avg(20, 33) => "0b11010"
    """

    if n > m:
        return -1
    return "{0:b}".format(int((n+m)/2)).zfill(2)
    
    
rounded_avg(1, 5)
rounded_avg(7, 5)
rounded_avg(10, 20)
rounded_avg(20, 33)
rounded_avg(10, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)

def rounded_avg(n, m):
    """You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m). 
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return -1.
    Example:
    rounded_avg(1, 5) => "0b11"
    rounded_avg(7, 5) => -1
    rounded_avg(10, 20) => "0b1111"
    rounded_avg(20, 33) => "0b11010"
    """

    if n > m:
        return -1
    else:
        return int(bin(int(round(n + m / 2)))[2:])


def rounded_avg(n, m):
    """You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m). 
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return -1.
    Example:
    rounded_avg(1, 5) => "0b11"
    rounded_avg(7, 5) => -1
    rounded_avg(10, 20) => "0b1111"
    rounded_avg(20, 33) => "0b11010"
    """

    if n > m:
        return -1
    else:
        return int(round(n + m / 2))


def rounded_avg(n, m):
    """You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m). 
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return -1.
    Example:
    rounded_avg(1, 5) => "0b11"
    rounded_avg(7, 5) => -1
    rounded_avg(10, 20) => "0b1111"
    rounded_avg(20, 33) => "0b11010"
    """

    if n > m:
        return -1
    else:
        return int(round(n + m / 2))


def rounded_avg(n, m):
    """You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m). 
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return -1.
    Example:
    rounded_avg(1, 5) => "0b11"
    rounded_avg(7, 5) => -1
    rounded_avg(10, 20) => "0b1111"
    rounded_avg(20, 33) => "0b11010"
    """

    if n > m:
        return -1
    return int(round((n + m) / 2))


def rounded_avg(n, m):
    """You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m). 
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return -1.
    Example:
    rounded_avg(1, 5) => "0b11"
    rounded_avg(7, 5) => -1
    rounded_avg(10, 20) => "0b1111"
    rounded_avg(20, 33) => "0b11010"
    """

    if n > m:
        return -1
    else:
        return int(round(n + m / 2))

rounded_avg(1, 5)
rounded_avg(7, 5)
rounded_avg(10, 20)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)

def rounded_avg(n, m):
    """You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m). 
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return -1.
    Example:
    rounded_avg(1, 5) => "0b11"
    rounded_avg(7, 5) => -1
    rounded_avg(10, 20) => "0b1111"
    rounded_avg(20, 33) => "0b11010"
    """

    if n > m:
        return -1
    else:
        return int(round((n + m) / 2))

rounded_avg(1, 5)
rounded_avg(7, 5)
rounded_avg(10, 20)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33

def rounded_avg(n, m):
    """You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m). 
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return -1.
    Example:
    rounded_avg(1, 5) => "0b11"
    rounded_avg(7, 5) => -1
    rounded_avg(10, 20) => "0b1111"
    rounded_avg(20, 33) => "0b11010"
    """

    if n > m:
        return -1
    else:
        return int(round((n + m) / 2))


def rounded_avg(n, m):
    """You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m). 
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return -1.
    Example:
    rounded_avg(1, 5) => "0b11"
    rounded_avg(7, 5) => -1
    rounded_avg(10, 20) => "0b1111"
    rounded_avg(20, 33) => "0b11010"
    """

    if n > m:
        return -1
    else:
        return int(round(n + m / 2))


def rounded_avg(n, m):
    """You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m). 
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return -1.
    Example:
    rounded_avg(1, 5) => "0b11"
    rounded_avg(7, 5) => -1
    rounded_avg(10, 20) => "0b1111"
    rounded_avg(20, 33) => "0b11010"
    """

    if n > m:
        return -1
    return "{0:b}".format(int((n + m) / 2)).zfill(len(str(m)))


def rounded_avg(n, m):
    """You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m). 
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return -1.
    Example:
    rounded_avg(1, 5) => "0b11"
    rounded_avg(7, 5) => -1
    rounded_avg(10, 20) => "0b1111"
    rounded_avg(20, 33) => "0b11010"
    """

    if n > m:
        return -1
    else:
        return "{0:b}".format(int(round((n + m) / 2)))


def rounded_avg(n, m):
    """You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m). 
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return -1.
    Example:
    rounded_avg(1, 5) => "0b11"
    rounded_avg(7, 5) => -1
    rounded_avg(10, 20) => "0b1111"
    rounded_avg(20, 33) => "0b11010"
    """

    if n > m:
        return -1
    return int(bin(int((n + m) / 2))[2:])


def rounded_avg(n, m):
    """You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m). 
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return -1.
    Example:
    rounded_avg(1, 5) => "0b11"
    rounded_avg(7, 5) => -1
    rounded_avg(10, 20) => "0b1111"
    rounded_avg(20, 33) => "0b11010"
    """

    if n > m:
        return -1
    else:
        return "{0:b}".format(int((n+m)/2))


def rounded_avg(n, m):
    """You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m). 
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return -1.
    Example:
    rounded_avg(1, 5) => "0b11"
    rounded_avg(7, 5) => -1
    rounded_avg(10, 20) => "0b1111"
    rounded_avg(20, 33) => "0b11010"
    """

    if n > m:
        return -1
    return int(bin(int((n + m) / 2))[2:])


def rounded_avg(n, m):
    """You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m). 
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return -1.
    Example:
    rounded_avg(1, 5) => "0b11"
    rounded_avg(7, 5) => -1
    rounded_avg(10, 20) => "0b1111"
    rounded_avg(20, 33) => "0b11010"
    """

    if n > m:
        return -1
    return str(int(round(n/m*2)))


def rounded_avg(n, m):
    """You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m). 
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return -1.
    Example:
    rounded_avg(1, 5) => "0b11"
    rounded_avg(7, 5) => -1
    rounded_avg(10, 20) => "0b1111"
    rounded_avg(20, 33) => "0b11010"
    """

    if n > m:
        return -1
    return "{0:b}".format(int((n + m) / 2)).zfill(m - n + 1)


def rounded_avg(n, m):
    """You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m). 
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return -1.
    Example:
    rounded_avg(1, 5) => "0b11"
    rounded_avg(7, 5) => -1
    rounded_avg(10, 20) => "0b1111"
    rounded_avg(20, 33) => "0b11010"
    """

    if n > m:
        return -1
    return "{0:b}".format(int((n + m) / 2)).zfill(int(m - n + 1))

rounded_avg(1, 5)
rounded_avg(7, 5)
rounded_avg(10, 20)
rounded_avg(20, 33)
rounded_avg(10, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(

def rounded_avg(n, m):
    """You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m). 
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return -1.
    Example:
    rounded_avg(1, 5) => "0b11"
    rounded_avg(7, 5) => -1
    rounded_avg(10, 20) => "0b1111"
    rounded_avg(20, 33) => "0b11010"
    """

    if n > m:
        return -1
    return "{0:b}".format(int((n + m) / 2)).zfill(m - n + 1)


def rounded_avg(n, m):
    """You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m). 
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return -1.
    Example:
    rounded_avg(1, 5) => "0b11"
    rounded_avg(7, 5) => -1
    rounded_avg(10, 20) => "0b1111"
    rounded_avg(20, 33) => "0b11010"
    """

    if n > m:
        return -1
    return "{0:b}".format(int((n + m) / 2)).zfill(m - n + 1)


def rounded_avg(n, m):
    """You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m). 
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return -1.
    Example:
    rounded_avg(1, 5) => "0b11"
    rounded_avg(7, 5) => -1
    rounded_avg(10, 20) => "0b1111"
    rounded_avg(20, 33) => "0b11010"
    """

    if n > m:
        return -1
    return int(bin(int(round(n + m / 2))), 2)

rounded_avg(1, 5)
rounded_avg(7, 5)
rounded_avg(10, 20)
rounded_avg(20, 33)
rounded_avg(10, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20, 33)
rounded_avg(20
