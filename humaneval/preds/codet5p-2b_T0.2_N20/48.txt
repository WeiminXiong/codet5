
def file_name_check(file_name):
    """Create a function which takes a string representing a file's name, and returns
    'Yes' if the the file's name is valid, and returns 'No' otherwise.
    A file's name is considered to be valid if and only if all the following conditions 
    are met:
    - There should not be more than three digits ('0'-'9') in the file's name.
    - The file's name contains exactly one dot '.'
    - The substring before the dot should not be empty, and it starts with a letter from 
    the latin alphapet ('a'-'z' and 'A'-'Z').
    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
    Examples:
    file_name_check("example.txt") # => 'Yes'
    file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
    """

    if file_name.count('.') == 0:
        return 'No'
    elif file_name.count('.') == 1:
        if file_name[0].isalpha():
            if file_name[1:].isdigit():
                return 'Yes'
            else:
                return 'No'
        else:
            return 'No'
    elif file_name.count('.') == 2:
        if file_name[0].isalpha():
            if file_name[1:].isdigit():
                if file_name[2:].lower() in ['txt', 'exe', 'dll']:
                    return 'Yes'
                else:
                    return 'No'
            else:
                return 'No'
        else:
            return 'No'
    else:
        return 'No'

file_name_check("example.txt") # => 'Yes'
file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll.exe") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll.exe.dll") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll.exe.dll.dll") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll.exe.dll.dll.dll") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll.exe.dll.dll.dll.dll") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll.exe.dll.dll.dll.dll.dll") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll.exe.dll.dll.dll.dll.dll.dll") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll.exe.dll.dll.dll.dll.dll.dll.dll") # => 'No' (the name

def file_name_check(file_name):
    """Create a function which takes a string representing a file's name, and returns
    'Yes' if the the file's name is valid, and returns 'No' otherwise.
    A file's name is considered to be valid if and only if all the following conditions 
    are met:
    - There should not be more than three digits ('0'-'9') in the file's name.
    - The file's name contains exactly one dot '.'
    - The substring before the dot should not be empty, and it starts with a letter from 
    the latin alphapet ('a'-'z' and 'A'-'Z').
    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
    Examples:
    file_name_check("example.txt") # => 'Yes'
    file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
    """

    if len(file_name) > 3:
        return 'No'
    if file_name.count('.')!= 1:
        return 'No'
    if file_name[0] not in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ':
        return 'No'
    if file_name[-3:] not in ['txt', 'exe', 'dll']:
        return 'No'
    return 'Yes'


def file_name_check(file_name):
    """Create a function which takes a string representing a file's name, and returns
    'Yes' if the the file's name is valid, and returns 'No' otherwise.
    A file's name is considered to be valid if and only if all the following conditions 
    are met:
    - There should not be more than three digits ('0'-'9') in the file's name.
    - The file's name contains exactly one dot '.'
    - The substring before the dot should not be empty, and it starts with a letter from 
    the latin alphapet ('a'-'z' and 'A'-'Z').
    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
    Examples:
    file_name_check("example.txt") # => 'Yes'
    file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
    """

    if len(file_name) > 3:
        return 'No'
    if file_name[0] == '.':
        return 'No'
    if file_name[0].isalpha():
        if file_name[1:3] == 'txt' or file_name[1:3] == 'exe' or file_name[1:3] == 'dll':
            return 'Yes'
        else:
            return 'No'
    else:
        return 'No'


def file_name_check(file_name):
    """Create a function which takes a string representing a file's name, and returns
    'Yes' if the the file's name is valid, and returns 'No' otherwise.
    A file's name is considered to be valid if and only if all the following conditions 
    are met:
    - There should not be more than three digits ('0'-'9') in the file's name.
    - The file's name contains exactly one dot '.'
    - The substring before the dot should not be empty, and it starts with a letter from 
    the latin alphapet ('a'-'z' and 'A'-'Z').
    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
    Examples:
    file_name_check("example.txt") # => 'Yes'
    file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
    """

    if len(file_name) > 3:
        if file_name[0] == '.':
            if file_name[1] == '.':
                if file_name[2] == '.':
                    if file_name[3] == '.':
                        if file_name[4] == '.':
                            if file_name[5] == '.':
                                if file_name[6] == '.':
                                    if file_name[7] == '.':
                                        if file_name[8] == '.':
                                            if file_name[9] == '.':
                                                return 'Yes'
                                        else:
                                            return 'No'
                                    else:
                                        return 'No'
                                else:
                                    return 'No'
                            else:
                                return 'No'
                        else:
                            return 'No'
                    else:
                        return 'No'
                else:
                    return 'No'
            else:
                return 'No'
        else:
            return 'No'
    else:
        return 'No'


def file_name_check(file_name):
    """Create a function which takes a string representing a file's name, and returns
    'Yes' if the the file's name is valid, and returns 'No' otherwise.
    A file's name is considered to be valid if and only if all the following conditions 
    are met:
    - There should not be more than three digits ('0'-'9') in the file's name.
    - The file's name contains exactly one dot '.'
    - The substring before the dot should not be empty, and it starts with a letter from 
    the latin alphapet ('a'-'z' and 'A'-'Z').
    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
    Examples:
    file_name_check("example.txt") # => 'Yes'
    file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
    """

    if len(file_name) > 3:
        return 'No'
    if file_name.find('.') == -1:
        return 'No'
    if file_name[0].isalpha() == False:
        return 'No'
    if file_name[-3:] not in ['txt', 'exe', 'dll']:
        return 'No'
    return 'Yes'


def file_name_check(file_name):
    """Create a function which takes a string representing a file's name, and returns
    'Yes' if the the file's name is valid, and returns 'No' otherwise.
    A file's name is considered to be valid if and only if all the following conditions 
    are met:
    - There should not be more than three digits ('0'-'9') in the file's name.
    - The file's name contains exactly one dot '.'
    - The substring before the dot should not be empty, and it starts with a letter from 
    the latin alphapet ('a'-'z' and 'A'-'Z').
    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
    Examples:
    file_name_check("example.txt") # => 'Yes'
    file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
    """

    if len(file_name) > 3:
        if file_name[0] == '.':
            if file_name[1] == '.':
                if file_name[2] == '.':
                    if file_name[3] == '.':
                        if file_name[4] == '.':
                            if file_name[5] == '.':
                                if file_name[6] == '.':
                                    if file_name[7] == '.':
                                        if file_name[8] == '.':
                                            if file_name[9] == '.':
                                                return 'Yes'
                                        else:
                                            return 'No'
                                    else:
                                        return 'No'
                                else:
                                    return 'No'
                            else:
                                return 'No'
                        else:
                            return 'No'
                    else:
                        return 'No'
                else:
                    return 'No'
            else:
                return 'No'
        else:
            return 'No'
    else:
        return 'No'


def file_name_check(file_name):
    """Create a function which takes a string representing a file's name, and returns
    'Yes' if the the file's name is valid, and returns 'No' otherwise.
    A file's name is considered to be valid if and only if all the following conditions 
    are met:
    - There should not be more than three digits ('0'-'9') in the file's name.
    - The file's name contains exactly one dot '.'
    - The substring before the dot should not be empty, and it starts with a letter from 
    the latin alphapet ('a'-'z' and 'A'-'Z').
    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
    Examples:
    file_name_check("example.txt") # => 'Yes'
    file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
    """

    if len(file_name) > 3:
        return 'No'
    if file_name.count('.')!= 1:
        return 'No'
    if file_name[0].isalpha() == False:
        return 'No'
    if file_name[-3:] not in ['txt', 'exe', 'dll']:
        return 'No'
    return 'Yes'


def file_name_check(file_name):
    """Create a function which takes a string representing a file's name, and returns
    'Yes' if the the file's name is valid, and returns 'No' otherwise.
    A file's name is considered to be valid if and only if all the following conditions 
    are met:
    - There should not be more than three digits ('0'-'9') in the file's name.
    - The file's name contains exactly one dot '.'
    - The substring before the dot should not be empty, and it starts with a letter from 
    the latin alphapet ('a'-'z' and 'A'-'Z').
    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
    Examples:
    file_name_check("example.txt") # => 'Yes'
    file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
    """

    if len(file_name) > 3:
        if file_name[0] == '.':
            if file_name[1] == '.':
                if file_name[2] == '.':
                    if file_name[3] == '.':
                        if file_name[4] == '.':
                            if file_name[5] == '.':
                                if file_name[6] == '.':
                                    if file_name[7] == '.':
                                        if file_name[8] == '.':
                                            if file_name[9] == '.':
                                                return 'Yes'
                                        else:
                                            return 'No'
                                    else:
                                        return 'No'
                                else:
                                    return 'No'
                            else:
                                return 'No'
                        else:
                            return 'No'
                    else:
                        return 'No'
                else:
                    return 'No'
            else:
                return 'No'
        else:
            return 'No'
    else:
        return 'No'


def file_name_check(file_name):
    """Create a function which takes a string representing a file's name, and returns
    'Yes' if the the file's name is valid, and returns 'No' otherwise.
    A file's name is considered to be valid if and only if all the following conditions 
    are met:
    - There should not be more than three digits ('0'-'9') in the file's name.
    - The file's name contains exactly one dot '.'
    - The substring before the dot should not be empty, and it starts with a letter from 
    the latin alphapet ('a'-'z' and 'A'-'Z').
    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
    Examples:
    file_name_check("example.txt") # => 'Yes'
    file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
    """

    if len(file_name) > 3:
        return 'No'
    if file_name[0] not in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ':
        return 'No'
    if file_name[-1]!= '.':
        return 'No'
    if file_name[:-1].find('.') == -1:
        return 'No'
    if file_name[:-1].find('.') > 0:
        if file_name[:-1][file_name[:-1].find('.'):].lower() not in ['txt', 'exe', 'dll']:
            return 'No'
    return 'Yes'


def file_name_check(file_name):
    """Create a function which takes a string representing a file's name, and returns
    'Yes' if the the file's name is valid, and returns 'No' otherwise.
    A file's name is considered to be valid if and only if all the following conditions 
    are met:
    - There should not be more than three digits ('0'-'9') in the file's name.
    - The file's name contains exactly one dot '.'
    - The substring before the dot should not be empty, and it starts with a letter from 
    the latin alphapet ('a'-'z' and 'A'-'Z').
    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
    Examples:
    file_name_check("example.txt") # => 'Yes'
    file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
    """

    if file_name.count('.')!= 1:
        return 'No'
    if file_name[0].isalpha() == False:
        return 'No'
    if file_name[-3:] not in ['txt', 'exe', 'dll']:
        return 'No'
    return 'Yes'


def file_name_check(file_name):
    """Create a function which takes a string representing a file's name, and returns
    'Yes' if the the file's name is valid, and returns 'No' otherwise.
    A file's name is considered to be valid if and only if all the following conditions 
    are met:
    - There should not be more than three digits ('0'-'9') in the file's name.
    - The file's name contains exactly one dot '.'
    - The substring before the dot should not be empty, and it starts with a letter from 
    the latin alphapet ('a'-'z' and 'A'-'Z').
    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
    Examples:
    file_name_check("example.txt") # => 'Yes'
    file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
    """

    if file_name.count('.')!= 1:
        return 'No'
    if file_name[0].isalpha() == False:
        return 'No'
    if file_name[-3:] not in ['txt', 'exe', 'dll']:
        return 'No'
    return 'Yes'


def file_name_check(file_name):
    """Create a function which takes a string representing a file's name, and returns
    'Yes' if the the file's name is valid, and returns 'No' otherwise.
    A file's name is considered to be valid if and only if all the following conditions 
    are met:
    - There should not be more than three digits ('0'-'9') in the file's name.
    - The file's name contains exactly one dot '.'
    - The substring before the dot should not be empty, and it starts with a letter from 
    the latin alphapet ('a'-'z' and 'A'-'Z').
    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
    Examples:
    file_name_check("example.txt") # => 'Yes'
    file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
    """

    if file_name.count('.')!= 1:
        return 'No'
    if file_name[0].isalpha() == False:
        return 'No'
    if file_name[-3:] not in ['txt', 'exe', 'dll']:
        return 'No'
    return 'Yes'


def file_name_check(file_name):
    """Create a function which takes a string representing a file's name, and returns
    'Yes' if the the file's name is valid, and returns 'No' otherwise.
    A file's name is considered to be valid if and only if all the following conditions 
    are met:
    - There should not be more than three digits ('0'-'9') in the file's name.
    - The file's name contains exactly one dot '.'
    - The substring before the dot should not be empty, and it starts with a letter from 
    the latin alphapet ('a'-'z' and 'A'-'Z').
    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
    Examples:
    file_name_check("example.txt") # => 'Yes'
    file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
    """

    if file_name.count('.') == 0:
        return 'No'
    if file_name[0].isalpha() and file_name[1:].isdigit():
        return 'Yes'
    return 'No'


def file_name_check(file_name):
    """Create a function which takes a string representing a file's name, and returns
    'Yes' if the the file's name is valid, and returns 'No' otherwise.
    A file's name is considered to be valid if and only if all the following conditions 
    are met:
    - There should not be more than three digits ('0'-'9') in the file's name.
    - The file's name contains exactly one dot '.'
    - The substring before the dot should not be empty, and it starts with a letter from 
    the latin alphapet ('a'-'z' and 'A'-'Z').
    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
    Examples:
    file_name_check("example.txt") # => 'Yes'
    file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
    """

    if len(file_name) > 3:
        return 'No'
    if file_name[0] == '.':
        return 'No'
    if file_name[0].isalpha() == False:
        return 'No'
    if file_name[-3:] not in ['txt', 'exe', 'dll']:
        return 'No'
    return 'Yes'

file_name_check("example.txt") # => 'Yes'
file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.exe") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.exe") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.exe") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.exe") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.exe") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.exe") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.exe") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.exe") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.exe") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.exe") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.exe") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.exe") # => 'No' (the name should start with a latin alphapet letter)
file_name_

def file_name_check(file_name):
    """Create a function which takes a string representing a file's name, and returns
    'Yes' if the the file's name is valid, and returns 'No' otherwise.
    A file's name is considered to be valid if and only if all the following conditions 
    are met:
    - There should not be more than three digits ('0'-'9') in the file's name.
    - The file's name contains exactly one dot '.'
    - The substring before the dot should not be empty, and it starts with a letter from 
    the latin alphapet ('a'-'z' and 'A'-'Z').
    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
    Examples:
    file_name_check("example.txt") # => 'Yes'
    file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
    """

    if len(file_name) > 3:
        if file_name[0] == '.':
            return 'No'
        if file_name[0].isalpha():
            if file_name[1:].isdigit():
                if file_name[-3:] in ['txt', 'exe', 'dll']:
                    return 'Yes'
                else:
                    return 'No'
            else:
                return 'No'
        else:
            return 'No'
    else:
        return 'No'

file_name_check("example.txt") # => 'Yes'
file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.exe") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll.exe") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll.exe.dll") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll.exe.dll.dll") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll.exe.dll.dll.dll") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll.exe.dll.dll.dll.dll") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll.exe.dll.dll.dll.dll.dll") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll.exe.dll.dll.dll.dll.dll.dll") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll.exe.dll.dll.dll.dll.dll.dll.dll") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll.exe.dll.dll.dll.dll.dll.dll.dll.dll

def file_name_check(file_name):
    """Create a function which takes a string representing a file's name, and returns
    'Yes' if the the file's name is valid, and returns 'No' otherwise.
    A file's name is considered to be valid if and only if all the following conditions 
    are met:
    - There should not be more than three digits ('0'-'9') in the file's name.
    - The file's name contains exactly one dot '.'
    - The substring before the dot should not be empty, and it starts with a letter from 
    the latin alphapet ('a'-'z' and 'A'-'Z').
    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
    Examples:
    file_name_check("example.txt") # => 'Yes'
    file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
    """

    if file_name.count('.') == 0:
        return 'No'
    elif file_name.count('.') > 1:
        return 'No'
    elif file_name[0].isalpha() == False:
        return 'No'
    elif file_name[-3:] not in ['txt', 'exe', 'dll']:
        return 'No'
    else:
        return 'Yes'

file_name_check("example.txt") # => 'Yes'
file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.exe") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll.exe") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll.exe.dll") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll.exe.dll.dll") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll.exe.dll.dll.dll") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll.exe.dll.dll.dll.dll") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll.exe.dll.dll.dll.dll.dll") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll.exe.dll.dll.dll.dll.dll.dll") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll.exe.dll.dll.dll.dll.dll.dll.dll") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll.exe.dll.dll.dll.dll.dll.dll.dll.dll") # => 'No' (the name should start with a latin alphapet letter)


def file_name_check(file_name):
    """Create a function which takes a string representing a file's name, and returns
    'Yes' if the the file's name is valid, and returns 'No' otherwise.
    A file's name is considered to be valid if and only if all the following conditions 
    are met:
    - There should not be more than three digits ('0'-'9') in the file's name.
    - The file's name contains exactly one dot '.'
    - The substring before the dot should not be empty, and it starts with a letter from 
    the latin alphapet ('a'-'z' and 'A'-'Z').
    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
    Examples:
    file_name_check("example.txt") # => 'Yes'
    file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
    """

    if file_name.count('.') == 1 and file_name[0].isalpha() and file_name[1:].isdigit():
        if file_name[-3:] in ['txt', 'exe', 'dll']:
            return 'Yes'
        else:
            return 'No'
    else:
        return 'No'

file_name_check("example.txt") # => 'Yes'
file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.exe") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll.exe") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll.exe.dll") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll.exe.dll.dll") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll.exe.dll.dll.dll") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll.exe.dll.dll.dll.dll") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll.exe.dll.dll.dll.dll.dll") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll.exe.dll.dll.dll.dll.dll.dll") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll.exe.dll.dll.dll.dll.dll.dll.dll") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll.exe.dll.dll.dll.dll.dll.dll.dll.dll") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll.exe.dll.dll.dll.dll

def file_name_check(file_name):
    """Create a function which takes a string representing a file's name, and returns
    'Yes' if the the file's name is valid, and returns 'No' otherwise.
    A file's name is considered to be valid if and only if all the following conditions 
    are met:
    - There should not be more than three digits ('0'-'9') in the file's name.
    - The file's name contains exactly one dot '.'
    - The substring before the dot should not be empty, and it starts with a letter from 
    the latin alphapet ('a'-'z' and 'A'-'Z').
    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
    Examples:
    file_name_check("example.txt") # => 'Yes'
    file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
    """

    if file_name.count('.') == 0:
        return 'No'
    elif file_name.count('.') == 1:
        if file_name[0].isalpha() and file_name[1].isalpha():
            return 'Yes'
        else:
            return 'No'
    elif file_name.count('.') == 2:
        if file_name[0].isalpha() and file_name[1].isalpha() and file_name[2].isalpha():
            return 'Yes'
        else:
            return 'No'
    elif file_name.count('.') == 3:
        if file_name[0].isalpha() and file_name[1].isalpha() and file_name[2].isalpha() and file_name[3].isalpha():
            return 'Yes'
        else:
            return 'No'
    else:
        return 'No'

file_name_check("example.txt") # => 'Yes'
file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
file_name_check

def file_name_check(file_name):
    """Create a function which takes a string representing a file's name, and returns
    'Yes' if the the file's name is valid, and returns 'No' otherwise.
    A file's name is considered to be valid if and only if all the following conditions 
    are met:
    - There should not be more than three digits ('0'-'9') in the file's name.
    - The file's name contains exactly one dot '.'
    - The substring before the dot should not be empty, and it starts with a letter from 
    the latin alphapet ('a'-'z' and 'A'-'Z').
    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
    Examples:
    file_name_check("example.txt") # => 'Yes'
    file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
    """

    if file_name.count('.')!= 1:
        return 'No'
    if file_name[0].isalpha() == False:
        return 'No'
    if file_name[0].isalpha() == True:
        if file_name[1].isalpha() == False:
            return 'No'
        if file_name[1].isalpha() == True:
            if file_name[2].isalpha() == False:
                return 'No'
            if file_name[2].isalpha() == True:
                if file_name[3].isalpha() == False:
                    return 'No'
                if file_name[3].isalpha() == True:
                    if file_name[4].isalpha() == False:
                        return 'No'
                    if file_name[4].isalpha() == True:
                        if file_name[5].isalpha() == False:
                            return 'No'
                        if file_name[5].isalpha() == True:
                            if file_name[6].isalpha() == False:
                                return 'No'
                            if file_name[6].isalpha() == True:
                                if file_name[7].isalpha() == False:
                                    return 'No'
                                if file_name[7].isalpha() == True:
                                    if file_name[8].isalpha() == False:
                                        return 'No'
                                    if file_name[8].isalpha() == True:
                                        if file_name[9].isalpha() == False:
                                            return 'No'
                                        if file_name[9].isalpha() == True:
                                            if file_name[10].isalpha() == False:
                                                return 'No'
                                            if file_name[10].isalpha() == True:
                                                if file_name[11].isalpha() == False:
                                                    return 'No'
                                                if file_name[11].isalpha() == True:
                                                    if file_name[12].isalpha() == False:
                                                        return 'No'
                                                    if file_name[12].isalpha() == True:
                                                        if file_name[13].isalpha() == False:
                                                            return 'No'
                                                        if file_name[13].isalpha() == True:
                                                            if file_name[14].isalpha() == False:
                                                                return 'No

def file_name_check(file_name):
    """Create a function which takes a string representing a file's name, and returns
    'Yes' if the the file's name is valid, and returns 'No' otherwise.
    A file's name is considered to be valid if and only if all the following conditions 
    are met:
    - There should not be more than three digits ('0'-'9') in the file's name.
    - The file's name contains exactly one dot '.'
    - The substring before the dot should not be empty, and it starts with a letter from 
    the latin alphapet ('a'-'z' and 'A'-'Z').
    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
    Examples:
    file_name_check("example.txt") # => 'Yes'
    file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
    """

    if len(file_name) > 3:
        if file_name[0] == '.':
            return 'No'
        if file_name[0].isalpha():
            if file_name[1:3].isalpha():
                if file_name[-3:] in ['txt', 'exe', 'dll']:
                    return 'Yes'
                else:
                    return 'No'
            else:
                return 'No'
        else:
            return 'No'
    else:
        return 'No'

