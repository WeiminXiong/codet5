

def correct_bracketing(brackets: str):
    """ brackets is a string of "<" and ">".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("<")
    False
    >>> correct_bracketing("<>")
    True
    >>> correct_bracketing("<<><>>")
    True
    >>> correct_bracketing("><<>")
    False
    """

    if len(brackets) % 2!= 0:
        return False
    opening = []
    for bracket in brackets:
        if bracket == "<":
            opening.append(bracket)
        elif bracket == ">":
            if len(opening) == 0:
                return False
            else:
                opening.pop()
    return len(opening) == 0



def correct_bracketing(brackets: str):
    """ brackets is a string of "<" and ">".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("<")
    False
    >>> correct_bracketing("<>")
    True
    >>> correct_bracketing("<<><>>")
    True
    >>> correct_bracketing("><<>")
    False
    """

    opening = set("<")
    closing = set(">")
    stack = []
    for bracket in brackets:
        if bracket in opening:
            stack.append(bracket)
        elif bracket in closing:
            if len(stack) == 0:
                return False
            if stack[-1] == "<" and bracket == ">":
                stack.pop()
            else:
                return False
    return len(stack) == 0



def correct_bracketing(brackets: str):
    """ brackets is a string of "<" and ">".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("<")
    False
    >>> correct_bracketing("<>")
    True
    >>> correct_bracketing("<<><>>")
    True
    >>> correct_bracketing("><<>")
    False
    """

    opening_brackets = set("<[")
    closing_brackets = set(">]")
    brackets_stack = []
    for bracket in brackets:
        if bracket in opening_brackets:
            brackets_stack.append(bracket)
        elif bracket in closing_brackets:
            if len(brackets_stack) == 0:
                return False
            if brackets_stack[-1] == opening_brackets[closing_brackets.index(bracket)]:
                brackets_stack.pop()
            else:
                return False
    return len(brackets_stack) == 0



def correct_bracketing(brackets: str):
    """ brackets is a string of "<" and ">".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("<")
    False
    >>> correct_bracketing("<>")
    True
    >>> correct_bracketing("<<><>>")
    True
    >>> correct_bracketing("><<>")
    False
    """

    if len(brackets) % 2!= 0:
        return False
    stack = []
    for bracket in brackets:
        if bracket == "<":
            stack.append(">")
        elif bracket == ">":
            if len(stack) == 0:
                return False
            else:
                stack.pop()
    return len(stack) == 0



def correct_bracketing(brackets: str):
    """ brackets is a string of "<" and ">".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("<")
    False
    >>> correct_bracketing("<>")
    True
    >>> correct_bracketing("<<><>>")
    True
    >>> correct_bracketing("><<>")
    False
    """

    brackets = brackets.replace("<", "")
    brackets = brackets.replace(">", "")
    brackets = brackets.replace("<<", "")
    brackets = brackets.replace(">>", "")
    brackets = brackets.replace("{", "")
    brackets = brackets.replace("}", "")
    brackets = brackets.replace("(", "")
    brackets = brackets.replace(")", "")
    brackets = brackets.replace("[", "")
    brackets = brackets.replace("]", "")
    brackets = brackets.replace("(", "")
    brackets = brackets.replace(")", "")
    brackets = brackets.replace("<", "")
    brackets = brackets.replace(">", "")
    brackets = brackets.replace("<<", "")
    brackets = brackets.replace(">>", "")
    brackets = brackets.replace("{", "")
    brackets = brackets.replace("}", "")
    brackets = brackets.replace("(", "")
    brackets = brackets.replace(")", "")
    brackets = brackets.replace("[", "")
    brackets = brackets.replace("]", "")
    brackets = brackets.replace("(", "")
    brackets = brackets.replace(")", "")
    brackets = brackets.replace("<", "")
    brackets = brackets.replace(">", "")
    brackets = brackets.replace("<<", "")
    brackets = brackets.replace(">>", "")
    brackets = brackets.replace("{", "")
    brackets = brackets.replace("}", "")
    brackets = brackets.replace("(", "")
    brackets = brackets.replace(")", "")
    brackets = brackets.replace("[", "")
    brackets = brackets.replace("]", "")
    brackets = brackets.replace("(", "")
    brackets = brackets.replace(")", "")
    brackets = brackets.replace("<", "")
    brackets = brackets.replace(">", "")
    brackets = brackets.replace("<<", "")
    brackets = brackets.replace(">>", "")
    brackets = brackets.replace("{", "")
    brackets = brackets.replace("}", "")
    brackets = brackets.replace("(", "")
    brackets = brackets.replace(")", "")
    brackets = brackets.replace("[", "")
    brackets = brackets.replace("]", "")
    brackets = brackets.replace("(", "")
    brackets = brackets.replace(")", "")
    brackets = brackets.replace("<", "")
    brackets = brackets.replace(">", "")
    brackets = brackets.replace("<<", "")
    brackets = brackets.replace(">>", "")
    brackets = brackets.replace("{", "")
    brackets


def correct_bracketing(brackets: str):
    """ brackets is a string of "<" and ">".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("<")
    False
    >>> correct_bracketing("<>")
    True
    >>> correct_bracketing("<<><>>")
    True
    >>> correct_bracketing("><<>")
    False
    """

    stack = []
    for bracket in brackets:
        if bracket == "<":
            stack.append(bracket)
        else:
            if len(stack) == 0:
                return False
            else:
                stack.pop()
    return len(stack) == 0



def correct_bracketing(brackets: str):
    """ brackets is a string of "<" and ">".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("<")
    False
    >>> correct_bracketing("<>")
    True
    >>> correct_bracketing("<<><>>")
    True
    >>> correct_bracketing("><<>")
    False
    """

    stack = []
    for bracket in brackets:
        if bracket == "<":
            stack.append(">")
        elif bracket == ">":
            if len(stack) == 0:
                return False
            elif stack[-1] == "<":
                stack.pop()
            else:
                return False
    return len(stack) == 0



def correct_bracketing(brackets: str):
    """ brackets is a string of "<" and ">".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("<")
    False
    >>> correct_bracketing("<>")
    True
    >>> correct_bracketing("<<><>>")
    True
    >>> correct_bracketing("><<>")
    False
    """

    if len(brackets) % 2!= 0:
        return False
    stack = []
    for bracket in brackets:
        if bracket == "<":
            stack.append(">")
        elif bracket == ">":
            if len(stack) == 0:
                return False
            if stack.pop()!= "<":
                return False
    return len(stack) == 0



def correct_bracketing(brackets: str):
    """ brackets is a string of "<" and ">".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("<")
    False
    >>> correct_bracketing("<>")
    True
    >>> correct_bracketing("<<><>>")
    True
    >>> correct_bracketing("><<>")
    False
    """

    if len(brackets) % 2!= 0:
        return False
    opening = set("<[(")
    closing = set(">])")
    stack = []
    for bracket in brackets:
        if bracket in opening:
            stack.append(bracket)
        elif bracket in closing:
            if len(stack) == 0:
                return False
            if stack[-1] == opening[closing.index(bracket)]:
                stack.pop()
            else:
                return False
    return len(stack) == 0



def correct_bracketing(brackets: str):
    """ brackets is a string of "<" and ">".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("<")
    False
    >>> correct_bracketing("<>")
    True
    >>> correct_bracketing("<<><>>")
    True
    >>> correct_bracketing("><<>")
    False
    """

    if len(brackets) % 2!= 0:
        return False
    stack = []
    for bracket in brackets:
        if bracket == "<":
            stack.append(">")
        elif bracket == ">":
            if len(stack) == 0:
                return False
            else:
                stack.pop()
    return len(stack) == 0



def correct_bracketing(brackets: str):
    """ brackets is a string of "<" and ">".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("<")
    False
    >>> correct_bracketing("<>")
    True
    >>> correct_bracketing("<<><>>")
    True
    >>> correct_bracketing("><<>")
    False
    """

    brackets = brackets.replace("<", "")
    brackets = brackets.replace(">", "")
    brackets = brackets.replace("<<", "")
    brackets = brackets.replace(">>", "")
    brackets = brackets.replace("<>", "")
    return brackets == ""



def correct_bracketing(brackets: str):
    """ brackets is a string of "<" and ">".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("<")
    False
    >>> correct_bracketing("<>")
    True
    >>> correct_bracketing("<<><>>")
    True
    >>> correct_bracketing("><<>")
    False
    """

    brackets = brackets.replace("<", "").replace(">", "")
    return brackets == ""



def correct_bracketing(brackets: str):
    """ brackets is a string of "<" and ">".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("<")
    False
    >>> correct_bracketing("<>")
    True
    >>> correct_bracketing("<<><>>")
    True
    >>> correct_bracketing("><<>")
    False
    """

    opening = set("<[(")
    closing = set(">])")
    stack = []
    for bracket in brackets:
        if bracket in opening:
            stack.append(bracket)
        elif bracket in closing:
            if len(stack) == 0:
                return False
            if stack[-1] == opening[closing.index(bracket)]:
                stack.pop()
            else:
                return False
    return len(stack) == 0



def correct_bracketing(brackets: str):
    """ brackets is a string of "<" and ">".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("<")
    False
    >>> correct_bracketing("<>")
    True
    >>> correct_bracketing("<<><>>")
    True
    >>> correct_bracketing("><<>")
    False
    """

    stack = []
    for bracket in brackets:
        if bracket == "<":
            stack.append(">")
        elif bracket == ">":
            if len(stack) == 0:
                return False
            elif stack[-1] == "<":
                stack.pop()
            else:
                return False
    return len(stack) == 0



def correct_bracketing(brackets: str):
    """ brackets is a string of "<" and ">".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("<")
    False
    >>> correct_bracketing("<>")
    True
    >>> correct_bracketing("<<><>>")
    True
    >>> correct_bracketing("><<>")
    False
    """

    opening_brackets = set("<[(")
    closing_brackets = set(">])")
    stack = []

    for bracket in brackets:
        if bracket in opening_brackets:
            stack.append(bracket)
        elif bracket in closing_brackets:
            if len(stack) == 0:
                return False
            if stack[-1] == opening_brackets[closing_brackets.index(bracket)]:
                stack.pop()
            else:
                return False
    return len(stack) == 0



def correct_bracketing(brackets: str):
    """ brackets is a string of "<" and ">".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("<")
    False
    >>> correct_bracketing("<>")
    True
    >>> correct_bracketing("<<><>>")
    True
    >>> correct_bracketing("><<>")
    False
    """

    open_brackets = []
    for bracket in brackets:
        if bracket == "<":
            open_brackets.append(bracket)
        elif bracket == ">":
            if len(open_brackets) == 0:
                return False
            else:
                open_brackets.pop()
    return len(open_brackets) == 0



def correct_bracketing(brackets: str):
    """ brackets is a string of "<" and ">".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("<")
    False
    >>> correct_bracketing("<>")
    True
    >>> correct_bracketing("<<><>>")
    True
    >>> correct_bracketing("><<>")
    False
    """

    brackets = brackets.replace("<", "")
    brackets = brackets.replace(">", "")
    brackets = brackets.replace("<<", "")
    brackets = brackets.replace(">>", "")
    brackets = brackets.replace("<>", "")
    brackets = brackets.replace(">", "")
    brackets = brackets.replace("<<", "")
    brackets = brackets.replace(">>", "")
    return brackets == ""



def correct_bracketing(brackets: str):
    """ brackets is a string of "<" and ">".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("<")
    False
    >>> correct_bracketing("<>")
    True
    >>> correct_bracketing("<<><>>")
    True
    >>> correct_bracketing("><<>")
    False
    """

    brackets = brackets.replace("<", "").replace(">", "")
    brackets = list(brackets)
    stack = []
    for bracket in brackets:
        if bracket == "<":
            stack.append(bracket)
        elif bracket == ">":
            if len(stack) == 0:
                return False
            else:
                stack.pop()
    return len(stack) == 0



def correct_bracketing(brackets: str):
    """ brackets is a string of "<" and ">".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("<")
    False
    >>> correct_bracketing("<>")
    True
    >>> correct_bracketing("<<><>>")
    True
    >>> correct_bracketing("><<>")
    False
    """

    opening_brackets = []
    for bracket in brackets:
        if bracket == "<":
            opening_brackets.append(bracket)
        else:
            if len(opening_brackets) == 0:
                return False
            opening_brackets.pop()
    return len(opening_brackets) == 0



def correct_bracketing(brackets: str):
    """ brackets is a string of "<" and ">".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("<")
    False
    >>> correct_bracketing("<>")
    True
    >>> correct_bracketing("<<><>>")
    True
    >>> correct_bracketing("><<>")
    False
    """

    brackets = brackets.replace("<", "").replace(">", "")
    return brackets == ""

