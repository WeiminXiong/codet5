
def max_fill(grid, capacity):
    import math
    """
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it, 
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example 1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Example 2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5
    
    Example 3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """

    rows = len(grid)
    cols = len(grid[0])
    bucket_capacity = capacity
    bucket_count = 0
    for i in range(rows):
        for j in range(cols):
            if grid[i][j] == 1:
                bucket_count += 1
    
    if bucket_count == 0:
        return 0
    
    if bucket_count == rows * cols:
        return math.inf
    
    bucket_count = 0
    for i in range(rows):
        for j in range(cols):
            if grid[i][j] == 1:
                bucket_count += 1
                if bucket_count > bucket_capacity:
                    return bucket_count
                else:
                    grid[i][j] = 0
    
    return bucket_count


def max_fill(grid, capacity):
    import math
    """
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it, 
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example 1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Example 2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5
    
    Example 3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """

    if not grid:
        return 0
    
    rows, cols = len(grid), len(grid[0])
    bucket_capacity = capacity
    
    def fill(row, col, bucket_capacity):
        if row == rows or col == cols:
            return 0
        
        if grid[row][col] == 0:
            return 0
        
        if bucket_capacity == 0:
            return 0
        
        if row == rows - 1 and col == cols - 1:
            return 1
        
        if grid[row][col] == 1:
            grid[row][col] = 0
            return fill(row + 1, col, bucket_capacity) + fill(row, col + 1, bucket_capacity)
        
        return fill(row + 1, col, bucket_capacity) + fill(row, col + 1, bucket_capacity)
    
    return fill(0, 0, bucket_capacity)


def max_fill(grid, capacity):
    import math
    """
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it, 
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example 1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Example 2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5
    
    Example 3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """

    if not grid:
        return 0
    
    rows, cols = len(grid), len(grid[0])
    bucket_capacity = capacity
    bucket_count = 0
    
    for i in range(rows):
        for j in range(cols):
            if grid[i][j] == 1:
                bucket_count += 1
                
    if bucket_count == 0:
        return 0
    
    if bucket_count == rows * cols:
        return bucket_count
    
    if bucket_count < rows * cols:
        return bucket_count
    
    if bucket_count > rows * cols:
        return math.ceil(bucket_count / rows)
    
    return bucket_count


def max_fill(grid, capacity):
    import math
    """
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it, 
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example 1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Example 2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5
    
    Example 3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """

    def fill_well(grid, capacity):
        """
        Fill the wells with the capacity
        """
        for i in range(len(grid)):
            for j in range(len(grid[i])):
                if grid[i][j] == 1:
                    if j == 0:
                        grid[i][j] = 0
                    else:
                        grid[i][j] = grid[i][j-1]
        return grid

    def find_max_fill(grid, capacity):
        """
        Find the maximum number of wells that can be filled with the capacity
        """
        if not grid:
            return 0
        if not capacity:
            return 0
        if capacity <= 0:
            return 0
        if len(grid) == 1 and len(grid[0]) == 1:
            return 0
        if len(grid) == 1 and len(grid[0]) == 0:
            return 0
        if len(grid) == 0:
            return 0
        if len(grid[0]) == 0:
            return 0
        if len(grid) == 1 and len(grid[0]) == 1:
            return 0
        if len(grid) == 1 and len(grid[0]) == 0:
            return 0
        if len(grid) == 0:
            return 0
        if len(grid[0]) == 0:
            return 0
        if len(grid) == 1 and len(grid[0]) == 1:
            return 0
        if len(grid) == 1 and len(grid[0]) == 0:
            return 0
        if len(grid) == 0:
            return 0
        if len(grid[0]) == 0:
            return 0
        if len(grid) == 1 and len(grid[0]) == 1:
            return 0
        if len(grid) == 1 and len(grid[0]) == 0:
            return 0
        if len(grid) == 0:
            return 0
        if len(grid[0

def max_fill(grid, capacity):
    import math
    """
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it, 
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example 1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Example 2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5
    
    Example 3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """

    if not grid:
        return 0
    
    rows, cols = len(grid), len(grid[0])
    
    def get_max_fill(grid, capacity):
        if not grid:
            return 0
        
        rows, cols = len(grid), len(grid[0])
        
        dp = [[0] * cols for _ in range(rows)]
        
        for i in range(rows):
            for j in range(cols):
                if grid[i][j] == 0:
                    continue
                
                if j == 0:
                    dp[i][j] = grid[i][j]
                else:
                    dp[i][j] = dp[i][j-1] + grid[i][j]
        
        for i in range(rows):
            for j in range(cols):
                if grid[i][j] == 0:
                    continue
                
                if j == 0:
                    dp[i][j] = dp[i][j]
                else:
                    dp[i][j] = max(dp[i][j], dp[i][j-1])
        
        return dp[-1][-1]
    
    return get_max_fill(grid, capacity)


def max_fill(grid, capacity):
    import math
    """
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it, 
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example 1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Example 2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5
    
    Example 3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """

    def fill_well(grid, i, j, capacity):
        if grid[i][j] == 0:
            return 0
        if grid[i][j] == 1:
            grid[i][j] = 0
            return 1
        if grid[i][j] == 2:
            return 0
        if grid[i][j] == 3:
            return 0
        if grid[i][j] == 4:
            return 0
        if grid[i][j] == 5:
            return 0
        if grid[i][j] == 6:
            return 0
        if grid[i][j] == 7:
            return 0
        if grid[i][j] == 8:
            return 0
        if grid[i][j] == 9:
            return 0
        if grid[i][j] == 10:
            return 0
        if grid[i][j] == 11:
            return 0
        if grid[i][j] == 12:
            return 0
        if grid[i][j] == 13:
            return 0
        if grid[i][j] == 14:
            return 0
        if grid[i][j] == 15:
            return 0
        if grid[i][j] == 16:
            return 0
        if grid[i][j] == 17:
            return 0
        if grid[i][j] == 18:
            return 0
        if grid[i][j] == 19:
            return 0
        if grid[i][j] == 20:
            return 0
        if grid[i][j] == 21:
            return 0
        if grid[i][j] == 22:
            return 0
        if grid[i][j] == 23:
            return 0
        if grid[i][j] == 24:
            return 0
        if grid[i][j] == 25:
            return 0
        if grid[i][j] == 26:
            return 0
        if grid[i][j]

def max_fill(grid, capacity):
    import math
    """
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it, 
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example 1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Example 2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5
    
    Example 3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """

    if not grid:
        return 0
    
    rows, cols = len(grid), len(grid[0])
    bucket_capacity = capacity
    
    def fill_well(row, col, bucket_capacity):
        if row == rows or col == cols:
            return 0
        
        if grid[row][col] == 0:
            return 0
        
        grid[row][col] = 0
        
        fill_well(row + 1, col, bucket_capacity)
        fill_well(row, col + 1, bucket_capacity)
        fill_well(row - 1, col, bucket_capacity)
        fill_well(row, col - 1, bucket_capacity)
        
        return 1
    
    return fill_well(0, 0, bucket_capacity)


def max_fill(grid, capacity):
    import math
    """
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it, 
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example 1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Example 2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5
    
    Example 3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """

    if not grid:
        return 0
    
    rows = len(grid)
    cols = len(grid[0])
    
    bucket_capacity = capacity
    
    bucket_count = 0
    
    for i in range(rows):
        for j in range(cols):
            if grid[i][j] == 1:
                bucket_count += 1
    
    if bucket_count == 0:
        return 0
    
    if bucket_count == rows * cols:
        return bucket_count
    
    max_fill_count = math.ceil(bucket_capacity / bucket_count)
    
    return max_fill_count


def max_fill(grid, capacity):
    import math
    """
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it, 
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example 1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Example 2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5
    
    Example 3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """

    if not grid:
        return 0
    
    rows = len(grid)
    cols = len(grid[0])
    
    if capacity <= 0:
        return 0
    
    if capacity > cols:
        return 0
    
    if capacity > rows:
        return 0
    
    if capacity == 1:
        return rows * cols
    
    dp = [[math.inf for _ in range(capacity+1)] for _ in range(rows+1)]
    
    for i in range(rows+1):
        dp[i][0] = 0
    
    for j in range(cols+1):
        dp[0][j] = 0
    
    for i in range(1, rows+1):
        for j in range(1, cols+1):
            if grid[i-1][j-1] == 1:
                dp[i][j] = min(dp[i][j], dp[i-1][j]+1)
            else:
                dp[i][j] = min(dp[i][j], dp[i][j-1]+1)
    
    return dp[rows][cols]


def max_fill(grid, capacity):
    import math
    """
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it, 
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example 1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Example 2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5
    
    Example 3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """

    def max_fill_util(grid, row, col, capacity, count):
        if row == len(grid) or col == len(grid[row]):
            return 0
        if grid[row][col] == 0:
            return 0
        if capacity == 0:
            return 0
        if row == len(grid) - 1 and col == len(grid[row]) - 1:
            return math.inf
        if grid[row][col] == 1:
            return math.inf
        if grid[row][col] == 0:
            grid[row][col] = 1
            count = max(count, max_fill_util(grid, row+1, col, capacity-1, count))
            count = max(count, max_fill_util(grid, row, col+1, capacity-1, count))
            grid[row][col] = 0
        return count
    return max_fill_util(grid, 0, 0, capacity, 0)


def max_fill(grid, capacity):
    import math
    """
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it, 
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example 1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Example 2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5
    
    Example 3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """

    def get_max_fill(grid, capacity):
        if not grid:
            return 0
        
        rows, cols = len(grid), len(grid[0])
        dp = [[0] * (cols + 1) for _ in range(rows + 1)]
        
        for i in range(1, rows + 1):
            for j in range(1, cols + 1):
                if grid[i - 1][j - 1] == 0:
                    dp[i][j] = 0
                else:
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + 1
        
        return dp[rows][cols]
    
    return get_max_fill(grid, capacity)


def max_fill(grid, capacity):
    import math
    """
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it, 
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example 1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Example 2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5
    
    Example 3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """

    def fill_well(grid, capacity):
        """
        Fill the wells with the capacity
        """
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 1:
                    grid[i][j] = 0
                    if j == 0:
                        if grid[i][j+1] == 0:
                            grid[i][j+1] = 1
                    elif j == len(grid[0])-1:
                        if grid[i][j-1] == 0:
                            grid[i][j-1] = 1
                    else:
                        if grid[i][j-1] == 0 and grid[i][j+1] == 0:
                            grid[i][j-1] = 1
                            grid[i][j+1] = 1
        return grid

    def empty_well(grid, capacity):
        """
        Empty the wells with the capacity
        """
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 1:
                    grid[i][j] = 0
                    if j == 0:
                        if grid[i][j+1] == 1:
                            grid[i][j+1] = 0
                    elif j == len(grid[0])-1:
                        if grid[i][j-1] == 1:
                            grid[i][j-1] = 0
                    else:
                        if grid[i][j-1] == 1 and grid[i][j+1] == 1:
                            grid[i][j-1] = 0
                            grid[i][j+1] = 0
        return grid

    def max_fill_rec(grid, capacity):
        """
        Recursive function to find the maximum number of wells that can be filled
        """
        if not grid:
            return 0
        if capacity == 0:
            return 0
        

def max_fill(grid, capacity):
    import math
    """
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it, 
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example 1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Example 2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5
    
    Example 3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """

    def fill_well(grid, bucket_capacity, row, col):
        if row == len(grid):
            return 0
        if col == len(grid[row]):
            return fill_well(grid, bucket_capacity, row+1, 0)
        if grid[row][col] == 0:
            return fill_well(grid, bucket_capacity, row, col+1)
        else:
            return fill_well(grid, bucket_capacity, row, col+1) + 1

    return fill_well(grid, capacity, 0, 0)


def max_fill(grid, capacity):
    import math
    """
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it, 
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example 1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Example 2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5
    
    Example 3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """

    if not grid:
        return 0

    row_len = len(grid)
    col_len = len(grid[0])
    bucket_capacity = capacity
    bucket_count = 0

    for i in range(row_len):
        for j in range(col_len):
            if grid[i][j] == 1:
                bucket_count += 1
                if bucket_count > bucket_capacity:
                    return bucket_count
    return bucket_count


def max_fill(grid, capacity):
    import math
    """
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it, 
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example 1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Example 2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5
    
    Example 3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """

    if not grid:
        return 0
    
    rows = len(grid)
    cols = len(grid[0])
    
    bucket_capacity = capacity
    
    # create a list of lists to store the number of times you need to lower the buckets
    # for each row
    bucket_count = [[0]*cols for _ in range(rows)]
    
    # for each row, find the number of times you need to lower the buckets
    for i in range(rows):
        for j in range(cols):
            if grid[i][j] == 1:
                bucket_count[i][j] = math.ceil(bucket_capacity/capacity)
                bucket_capacity -= bucket_count[i][j]*capacity
    
    return sum(bucket_count)


def max_fill(grid, capacity):
    import math
    """
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it, 
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example 1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Example 2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5
    
    Example 3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """

    def fill_well(grid, capacity):
        """
        Fill the wells with the capacity
        """
        rows, cols = len(grid), len(grid[0])
        for i in range(rows):
            for j in range(cols):
                if grid[i][j] == 1:
                    fill_bucket(grid, capacity, i, j)

    def fill_bucket(grid, capacity, i, j):
        """
        Fill the bucket with the capacity
        """
        rows, cols = len(grid), len(grid[0])
        if i == rows - 1 or j == cols - 1:
            return
        if grid[i][j] == 1:
            grid[i][j] = 0
            fill_bucket(grid, capacity, i + 1, j)
            fill_bucket(grid, capacity, i, j + 1)
        else:
            return

    def count_fill(grid, capacity):
        """
        Count the number of times you need to lower the buckets
        """
        rows, cols = len(grid), len(grid[0])
        count = 0
        for i in range(rows):
            for j in range(cols):
                if grid[i][j] == 1:
                    count += math.ceil(capacity / (capacity - grid[i][j]))
        return count

    fill_well(grid, capacity)
    return count_fill(grid, capacity)


def max_fill(grid, capacity):
    import math
    """
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it, 
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example 1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Example 2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5
    
    Example 3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """

    if not grid:
        return 0
    
    rows = len(grid)
    cols = len(grid[0])
    
    def fill(row, col, capacity):
        if row == rows or col == cols:
            return 0
        
        if grid[row][col] == 0:
            return 0
        
        if grid[row][col] == 1:
            grid[row][col] = 0
            return 1 + fill(row, col+1, capacity) + fill(row+1, col, capacity)
        
        return fill(row+1, col, capacity)
    
    return fill(0, 0, capacity)


def max_fill(grid, capacity):
    import math
    """
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it, 
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example 1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Example 2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5
    
    Example 3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """

    if not grid or not capacity:
        return 0

    row_len = len(grid)
    col_len = len(grid[0])

    # find the max number of wells that can be filled
    max_fill_wells = 0
    for i in range(row_len):
        for j in range(col_len):
            if grid[i][j] == 1:
                max_fill_wells = max(max_fill_wells, math.ceil(capacity / (row_len * col_len)))

    # find the max number of wells that can be filled
    max_fill_wells = 0
    for i in range(row_len):
        for j in range(col_len):
            if grid[i][j] == 1:
                max_fill_wells = max(max_fill_wells, math.ceil(capacity / (row_len * col_len)))

    # find the max number of wells that can be filled
    max_fill_wells = 0
    for i in range(row_len):
        for j in range(col_len):
            if grid[i][j] == 1:
                max_fill_wells = max(max_fill_wells, math.ceil(capacity / (row_len * col_len)))

    # find the max number of wells that can be filled
    max_fill_wells = 0
    for i in range(row_len):
        for j in range(col_len):
            if grid[i][j] == 1:
                max_fill_wells = max(max_fill_wells, math.ceil(capacity / (row_len * col_len)))

    return max_fill_wells


def max_fill(grid, capacity):
    import math
    """
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it, 
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example 1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Example 2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5
    
    Example 3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """

    if not grid or not grid[0]:
        return 0
    
    rows = len(grid)
    cols = len(grid[0])
    
    if capacity <= 0:
        return 0
    
    if capacity > cols:
        return 0
    
    if capacity == cols:
        return rows * cols
    
    bucket_capacity = capacity
    
    # find the max height of each row
    max_height = [0] * rows
    for i in range(rows):
        max_height[i] = max(max_height[i], sum(grid[i]))
    
    # find the max height of each column
    max_height_col = [0] * cols
    for j in range(cols):
        max_height_col[j] = max(max_height_col[j], sum([grid[i][j] for i in range(rows)]))
    
    # find the max height of each row and column
    max_height = max(max_height, max_height_col)
    max_height = max(max_height, max_height_col)
    
    # find the max height of each column
    max_height_col = [0] * cols
    for j in range(cols):
        max_height_col[j] = max(max_height_col[j], sum([grid[i][j] for i in range(rows)]))
    
    # find the max height of each row
    max_height_row = [0] * rows
    for i in range(rows):
        max_height_row[i] = max(max_height_row[i], sum([grid[i][j] for j in range(cols)]))
    
    # find the max height of each column
    max_height_col = [0] * cols
    for j in range(cols):
        max_height_col[j] = max(max_height

def max_fill(grid, capacity):
    import math
    """
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it, 
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example 1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Example 2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5
    
    Example 3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """

    if not grid:
        return 0
    
    rows, cols = len(grid), len(grid[0])
    
    def fill(row, col, capacity):
        if row == rows or col == cols:
            return 0
        
        if grid[row][col] == 0:
            return 0
        
        if grid[row][col] == 1:
            grid[row][col] = 0
            return 1 + fill(row, col+1, capacity) + fill(row+1, col, capacity)
        
        return fill(row, col+1, capacity) + fill(row+1, col, capacity)
    
    return fill(0, 0, capacity)

