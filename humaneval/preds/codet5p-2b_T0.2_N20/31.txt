
def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''

    if len(lst) < 2:
        return True
    for i in range(len(lst) - 1):
        if lst[i] > lst[i + 1]:
            return False
    return True

is_sorted([5]) ➞ True
is_sorted([1, 2, 3, 4, 5]) ➞ True
is_sorted([1, 3, 2, 4, 5]) ➞ False
is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 3, 3, 4]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) �

def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''

    if len(lst) < 2:
        return True
    if lst[0] > lst[1]:
        return False
    for i in range(len(lst) - 1):
        if lst[i] > lst[i + 1]:
            return False
    return True

is_sorted([5]) ➞ True
is_sorted([1, 2, 3, 4, 5]) ➞ True
is_sorted([1, 3, 2, 4, 5]) ➞ False
is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is

def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''

    if len(lst) == 0:
        return True
    if len(lst) == 1:
        return True
    if len(lst) == 2:
        return lst[0] <= lst[1]
    if lst[0] <= lst[1]:
        return is_sorted(lst[1:])
    else:
        return False


def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''

    for i in range(len(lst)-1):
        if lst[i] > lst[i+1]:
            return False
    return True


def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''

    if len(lst) == 1:
        return True
    for i in range(len(lst) - 1):
        if lst[i] > lst[i + 1]:
            return False
    return True

is_sorted([5]) ➞ True
is_sorted([1, 2, 3, 4, 5]) ➞ True
is_sorted([1, 3, 2, 4, 5]) ➞ False
is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) �

def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''

    if len(lst) == 0:
        return True
    if len(lst) == 1:
        return True
    if lst[0] > lst[1]:
        return False
    if lst[-1] > lst[-2]:
        return False
    for i in range(1, len(lst)):
        if lst[i] < lst[i-1]:
            return False
    return True

is_sorted([5]) ➞ True
is_sorted([1, 2, 3, 4, 5]) ➞ True
is_sorted([1, 3, 2, 4, 5]) ➞ False
is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4, 5]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4, 5, 6]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4, 5, 6, 7]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4, 5, 6, 7, 8]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13

def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''

    if len(lst) < 2:
        return True
    for i in range(len(lst) - 1):
        if lst[i] > lst[i + 1]:
            return False
    return True

is_sorted([5]) ➞ True
is_sorted([1, 2, 3, 4, 5]) ➞ True
is_sorted([1, 3, 2, 4, 5]) ➞ False
is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([5, 5]) ➞ True
is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
is_sorted([1, 2, 2, 3, 3, 4, 4]) ➞ False

is_sorted([1, 2, 2, 3, 3, 4, 4]) ➞ True
is_sorted([1, 2, 2, 3, 3, 4, 5]) ➞ False
is_sorted([1, 2, 2, 3, 3, 4, 5, 5]) ➞ True

is_sorted([1, 2, 2, 3, 3, 4, 5, 6]) ➞ True
is_sorted([1, 2, 2, 3, 3, 4, 5, 6, 7]) ➞ False
is_sorted([1, 2, 2, 3, 3, 4, 5, 6, 7, 7]) ➞ True

is_sorted([1, 2, 2, 3, 3, 4, 5, 6, 7, 7]) ➞ True
is_sorted([1, 2, 2, 3, 3, 4, 5, 6, 7, 8]) ➞ False
is_sorted([1, 2, 2, 3, 3, 4, 5, 6, 7, 8, 8]) ➞ True

is_sorted([1, 2, 2, 3, 3, 4, 5, 6

def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''

    if len(lst) == 1:
        return True
    if len(lst) == 2:
        if lst[0] == lst[1]:
            return True
        else:
            return False
    if len(lst) > 2:
        if lst[0] == lst[1]:
            return is_sorted(lst[2:])
        else:
            return False

is_sorted([5]) ➞ True
is_sorted([1, 2, 3, 4, 5]) ➞ True
is_sorted([1, 3, 2, 4, 5]) ➞ False
is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4, 5]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4, 5, 6]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4, 5, 6, 7]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4, 5, 6, 7, 8]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) �

def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''

    if len(lst) < 2:
        return True
    if lst[0] > lst[1]:
        return False
    for i in range(len(lst)-1):
        if lst[i] > lst[i+1]:
            return False
    return True

is_sorted([5]) ➞ True
is_sorted([1, 2, 3, 4, 5]) ➞ True
is_sorted([1, 3, 2, 4, 5]) ➞ False
is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4, 5]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4, 5, 6]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4, 5, 6, 7]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4, 5, 6, 7, 8]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) ➞ False
is_sorted([1,

def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''

    if len(lst) < 2:
        return True
    if lst[0] > lst[1]:
        return False
    for i in range(len(lst) - 1):
        if lst[i] > lst[i + 1]:
            return False
    return True

is_sorted([5]) ➞ True
is_sorted([1, 2, 3, 4, 5]) ➞ True
is_sorted([1, 3, 2, 4, 5]) ➞ False
is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([5, 5]) ➞ True
is_sorted([1, 2, 3, 4, 5]) ➞ True
is_sorted([1, 2, 3, 4, 5, 6]) ➞ False
is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
is_sorted([1, 2, 3, 4, 5, 6, 7, 8]) ➞ False
is_sorted([1, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ False
is_sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ False
is_sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ➞ False
is_sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) ➞ False
is_sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) ➞ False
is_sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) ➞ False
is_sorted([1, 2, 3, 4

def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''

    if len(lst) == 1:
        return True
    if len(lst) == 2:
        if lst[0] == lst[1]:
            return True
        else:
            return False
    for i in range(len(lst) - 1):
        if lst[i] > lst[i+1]:
            return False
    return True

is_sorted([5]) ➞ True
is_sorted([1, 2, 3, 4, 5]) ➞ True
is_sorted([1, 3, 2, 4, 5]) ➞ False
is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 3, 3, 4]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
is_sorted([

def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''

    if len(lst) == 1:
        return True
    if lst[0] > lst[1]:
        return False
    for i in range(1, len(lst)):
        if lst[i] < lst[i-1]:
            return False
    return True

is_sorted([5]) ➞ True
is_sorted([1, 2, 3, 4, 5]) ➞ True
is_sorted([1, 3, 2, 4, 5]) ➞ False
is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is

def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''

    if len(lst) == 0:
        return True
    if len(lst) == 1:
        return True
    if len(lst) == 2:
        return lst[0] <= lst[1]
    if len(lst) == 3:
        return lst[0] <= lst[1] and lst[1] <= lst[2]
    if len(lst) == 4:
        return lst[0] <= lst[1] and lst[1] <= lst[2] and lst[2] <= lst[3]
    if len(lst) == 5:
        return lst[0] <= lst[1] and lst[1] <= lst[2] and lst[2] <= lst[3] and lst[3] <= lst[4]
    if len(lst) == 6:
        return lst[0] <= lst[1] and lst[1] <= lst[2] and lst[2] <= lst[3] and lst[3] <= lst[4] and lst[4] <= lst[5]
    if len(lst) == 7:
        return lst[0] <= lst[1] and lst[1] <= lst[2] and lst[2] <= lst[3] and lst[3] <= lst[4] and lst[4] <= lst[5] and lst[5] <= lst[6]
    if len(lst) == 8:
        return lst[0] <= lst[1] and lst[1] <= lst[2] and lst[2] <= lst[3] and lst[3] <= lst[4] and lst[4] <= lst[5] and lst[5] <= lst[6] and lst[6] <= lst[7]
    if len(lst) == 9:
        return lst[0] <= lst[1] and lst[1] <= lst[2] and lst[2] <= lst[3] and lst[3] <= lst[4] and lst[4] <= lst[5] and lst[5] <= lst[6] and lst[6] <= lst[7] and lst

def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''

    if len(lst) == 0:
        return True
    if len(lst) == 1:
        return True
    if lst[0] > lst[1]:
        return False
    for i in range(len(lst)-1):
        if lst[i] > lst[i+1]:
            return False
    return True


def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''

    if len(lst) < 2:
        return True
    for i in range(len(lst)-1):
        if lst[i] > lst[i+1]:
            return False
    return True

is_sorted([5]) ➞ True
is_sorted([1, 2, 3, 4, 5]) ➞ True
is_sorted([1, 3, 2, 4, 5]) ➞ False
is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([5, 5]) ➞ True
is_sorted([1, 2, 2, 3, 3, 4]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4, 5]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4, 5, 6]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4, 5, 6, 7]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4, 5, 6, 7, 7]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4, 5, 6, 7, 8]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4, 5, 6, 7, 8, 8]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4, 5, 6, 7, 8, 9, 9]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ False
is_sorted([1,

def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''

    if len(lst) == 1:
        return True
    if len(lst) == 2:
        if lst[0] == lst[1]:
            return True
        else:
            return False
    if len(lst) > 2:
        if lst[0] == lst[1]:
            return is_sorted(lst[2:])
        else:
            return False

is_sorted([5]) ➞ True
is_sorted([1, 2, 3, 4, 5]) ➞ True
is_sorted([1, 3, 2, 4, 5]) ➞ False
is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 3, 3, 4]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) �

def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''

    if len(lst) < 2:
        return True
    if lst[0] > lst[1]:
        return False
    for i in range(1, len(lst)):
        if lst[i] < lst[i-1]:
            return False
    return True

is_sorted([5]) ➞ True
is_sorted([1, 2, 3, 4, 5]) ➞ True
is_sorted([1, 3, 2, 4, 5]) ➞ False
is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4, 5]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4, 5, 6]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4, 5, 6, 7]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4, 5, 6, 7, 8]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) ➞ False
is_sorted([1, 2, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10,

def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''

    for i in range(len(lst) - 1):
        if lst[i] > lst[i + 1]:
            return False
    return True

is_sorted([5]) ➞ True
is_sorted([1, 2, 3, 4, 5]) ➞ True
is_sorted([1, 3, 2, 4, 5]) ➞ False
is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([5]) ➞ True
is_sorted([1, 2, 3, 4, 5]) ➞ True
is_sorted([1, 3, 2, 4, 5]) ➞ False
is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([5]) ➞ True
is_sorted([1, 2, 3, 4, 5]) ➞ True
is_sorted([1, 3, 2, 4, 5]) ➞ False
is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([5]) ➞ True
is_s

def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''

    for i in range(len(lst)-1):
        if lst[i] > lst[i+1]:
            return False
    return True

is_sorted([5]) ➞ True
is_sorted([1, 2, 3, 4, 5]) ➞ True
is_sorted([1, 3, 2, 4, 5]) ➞ False
is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([5, 1, 2, 3, 4]) ➞ False
is_sorted([1, 2, 3, 4, 5]) ➞ True
is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
is_sorted([1, 2, 3, 4, 5, 6, 7, 8]) ➞ False
is_sorted([1, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ False
is_sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ False
is_sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ➞ False
is_sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) ➞ False
is_sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) ➞ False
is_sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) ➞ False
is_sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) ➞ False


def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''

    for i in range(len(lst) - 1):
        if lst[i] > lst[i + 1]:
            return False
    return True

is_sorted([5]) ➞ True
is_sorted([1, 2, 3, 4, 5]) ➞ True
is_sorted([1, 3, 2, 4, 5]) ➞ False
is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2, 3, 4]) ➞ False

is_sorted([1, 2, 2, 2, 3, 4]) ➞ True
is_sorted([1, 2, 2, 2
