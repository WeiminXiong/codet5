
def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''

    if len(lst) == 0:
        return (None, None)
    elif len(lst) == 1:
        return (None, lst[0])
    else:
        neg = None
        pos = None
        for i in lst:
            if i < 0:
                if neg == None:
                    neg = i
                elif neg > i:
                    neg = i
            elif i > 0:
                if pos == None:
                    pos = i
                elif pos < i:
                    pos = i
        return (neg, pos)


def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''

    if not lst:
        return (None, None)
    neg = None
    pos = None
    for i in lst:
        if i < 0:
            if neg is None:
                neg = i
            elif neg > i:
                neg = i
        elif i > 0:
            if pos is None:
                pos = i
            elif pos < i:
                pos = i
    return (neg, pos)


def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''

    if len(lst) == 0:
        return (None, None)
    elif len(lst) == 1:
        return (None, lst[0])
    else:
        a = None
        b = None
        for i in lst:
            if i > 0:
                if a is None:
                    a = i
                elif a < i:
                    a = i
            elif i < 0:
                if b is None:
                    b = i
                elif b > i:
                    b = i
        return (a, b)


def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''

    if lst == []:
        return (None, None)
    else:
        a = None
        b = None
        for i in lst:
            if i > 0:
                if a == None or a > i:
                    a = i
            elif i < 0:
                if b == None or b < i:
                    b = i
        return (a, b)


def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''

    if not lst:
        return (None, None)
    neg = None
    pos = None
    for i in lst:
        if i < 0:
            if neg is None:
                neg = i
            elif neg > i:
                neg = i
        elif i > 0:
            if pos is None:
                pos = i
            elif pos < i:
                pos = i
    return (neg, pos)


def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''

    if len(lst) == 0:
        return (None, None)
    elif len(lst) == 1:
        return (None, lst[0])
    else:
        a = lst[0]
        b = lst[0]
        for i in range(1, len(lst)):
            if lst[i] > a:
                a = lst[i]
            elif lst[i] < b:
                b = lst[i]
        return (a, b)


def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''

    if not lst:
        return (None, None)
    neg = None
    pos = None
    for i in lst:
        if i < 0:
            if neg is None:
                neg = i
            elif neg > i:
                neg = i
        elif i > 0:
            if pos is None:
                pos = i
            elif pos < i:
                pos = i
    return (neg, pos)


def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''

    if not lst:
        return (None, None)
    neg = []
    pos = []
    for i in lst:
        if i < 0:
            neg.append(i)
        elif i > 0:
            pos.append(i)
    if neg:
        return (None, min(neg))
    elif pos:
        return (max(pos), None)
    else:
        return (None, None)


def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''

    if not lst:
        return None, None
    neg = None
    pos = None
    for i in lst:
        if i < 0:
            if neg is None:
                neg = i
            elif neg > i:
                neg = i
        elif i > 0:
            if pos is None:
                pos = i
            elif pos < i:
                pos = i
    return neg, pos


def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''

    if len(lst) == 0:
        return (None, None)
    if len(lst) == 1:
        return (None, lst[0])
    if lst[0] < 0:
        return (None, lst[0])
    if lst[0] > 0:
        return (lst[0], lst[1])
    if lst[1] < 0:
        return (lst[1], lst[0])
    if lst[1] > 0:
        return (lst[1], lst[0])
    return (None, None)


def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''

    if len(lst) == 0:
        return (None, None)
    elif len(lst) == 1:
        return (None, lst[0])
    else:
        neg = lst[0]
        pos = lst[0]
        for i in lst:
            if i < 0:
                neg = i
            elif i > 0:
                pos = i
        return (neg, pos)


def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''

    if len(lst) == 0:
        return (None, None)
    elif len(lst) == 1:
        return (None, lst[0])
    else:
        a = lst[0]
        b = lst[0]
        for i in lst:
            if i < 0:
                a = i
            elif i > 0:
                b = i
        return (a, b)


def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''

    if len(lst) == 0:
        return (None, None)
    elif len(lst) == 1:
        return (None, lst[0])
    else:
        a = None
        b = None
        for i in lst:
            if i < 0:
                if a == None or a < i:
                    a = i
            elif i > 0:
                if b == None or b > i:
                    b = i
        return (a, b)


def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''

    if len(lst) == 0:
        return (None, None)
    elif len(lst) == 1:
        return (None, lst[0])
    else:
        a = None
        b = None
        for i in lst:
            if i < 0:
                if a == None:
                    a = i
                elif a > i:
                    a = i
            elif i > 0:
                if b == None:
                    b = i
                elif b < i:
                    b = i
        return (a, b)


def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''

    if len(lst) == 0:
        return (None, None)
    elif len(lst) == 1:
        return (lst[0], lst[0])
    else:
        a = lst[0]
        b = lst[0]
        for i in range(1, len(lst)):
            if lst[i] > a:
                a = lst[i]
            elif lst[i] < b:
                b = lst[i]
        return (a, b)


def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''

    if len(lst) == 0:
        return (None, None)
    elif len(lst) == 1:
        return (None, lst[0])
    else:
        a = None
        b = None
        for i in lst:
            if i > 0:
                if a == None or a < i:
                    a = i
            elif i < 0:
                if b == None or b > i:
                    b = i
        return (a, b)


def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''

    if len(lst) == 0:
        return (None, None)
    if len(lst) == 1:
        return (None, lst[0])
    if len(lst) == 2:
        return (lst[0], lst[1])
    if lst[0] < 0:
        return (lst[0], lst[1])
    if lst[0] > 0:
        return (lst[0], lst[1])
    if lst[1] < 0:
        return (lst[0], lst[1])
    if lst[1] > 0:
        return (lst[0], lst[1])
    return (None, None)


def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''

    if len(lst) == 0:
        return (None, None)
    elif len(lst) == 1:
        return (None, lst[0])
    else:
        a = None
        b = None
        for i in lst:
            if i < 0:
                if a is None:
                    a = i
                elif a > i:
                    a = i
            elif i > 0:
                if b is None:
                    b = i
                elif b < i:
                    b = i
        return (a, b)


def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''

    if not lst:
        return (None, None)
    elif len(lst) == 1:
        return (lst[0], lst[0])
    else:
        a = lst[0]
        b = lst[0]
        for i in range(1, len(lst)):
            if a > lst[i]:
                a = lst[i]
            elif b < lst[i]:
                b = lst[i]
        return (a, b)


def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''

    if len(lst) == 0:
        return (None, None)
    elif len(lst) == 1:
        return (lst[0], lst[0])
    else:
        a = lst[0]
        b = lst[0]
        for i in range(1, len(lst)):
            if lst[i] > a:
                a = lst[i]
            elif lst[i] < b:
                b = lst[i]
        return (a, b)

